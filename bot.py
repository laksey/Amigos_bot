
import logging
import datetime
import csv
import asyncio
from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes
)

TOKEN = "8095206946:AAFlOJi0BoRr9Z-MJMigWkk6arT9Ck-uhRk"
CSV_PATH = "projects.csv"
ADMIN_USERNAME = "@ellobodefuego"

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def read_projects_csv(filepath):
    projects = []
    with open(filepath, newline='', encoding='utf-8') as csvfile:
        reader = csv.DictReader(csvfile)
        for row in reader:
            try:
                project = {
                    "project_name": row["–ü—Ä–æ–µ–∫—Ç"].strip(),
                    "responsible": row["–ê–∫–∫–∞—É–Ω–Ω—Ç "].strip(),
                    "report_day": int(row["–î–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞ "].strip())
                }
                projects.append(project)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏: {row}, {e}")
    return projects

def is_working_day(date):
    return date.weekday() < 5

def get_next_working_day(date):
    while not is_working_day(date):
        date += datetime.timedelta(days=1)
    return date

def get_today_projects(days_delta=0):
    today = datetime.datetime.now(datetime.timezone(datetime.timedelta(hours=3))).date()
    target_date = today + datetime.timedelta(days=days_delta)
    day = target_date.day
    return [p for p in read_projects_csv(CSV_PATH) if p["report_day"] == day]

async def notify_5days(update: Update, context: ContextTypes.DEFAULT_TYPE):
    projects = get_today_projects(5)
    if not projects:
        await update.message.reply_text("–ù–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å –æ—Ç—á–µ—Ç–æ–º —á–µ—Ä–µ–∑ 5 –¥–Ω–µ–π.")
        return
    text = "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —á–µ—Ä–µ–∑ 5 –¥–Ω–µ–π –Ω—É–∂–Ω–æ —Å–¥–∞—Ç—å –æ—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º:
"
    text += "
".join(f"‚Ä¢ {p['project_name']} ‚Äî {p['responsible']}" for p in projects)
    await update.message.reply_text(text)

async def notify_today(update: Update, context: ContextTypes.DEFAULT_TYPE):
    projects = get_today_projects(0)
    if not projects:
        await update.message.reply_text("–ù–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å –æ—Ç—á–µ—Ç–æ–º —Å–µ–≥–æ–¥–Ω—è.")
        return
    text = "–°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Å–¥–∞—á–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º:
"
    text += "
".join(f"‚Ä¢ {p['project_name']} ‚Äî {p['responsible']}" for p in projects)
    await update.message.reply_text(text)

async def report_1(update: Update, context: ContextTypes.DEFAULT_TYPE):
    projects = get_today_projects(0)
    if not projects:
        await update.message.reply_text("–ù–µ—Ç –æ—Ç—á–µ—Ç–æ–≤ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ.")
        return
    text = "üìã –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –æ—Ç—á–µ—Ç—ã –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ:
"
    text += "
".join(f"‚Ä¢ {p['project_name']} ‚Äî {p['responsible']}" for p in projects)
    text += "

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–æ–º–Ω–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞–º –æ–± –æ–ø–ª–∞—Ç–µ."
    await update.message.reply_text(text)

async def report_5(update: Update, context: ContextTypes.DEFAULT_TYPE):
    projects = get_today_projects(0)
    if not projects:
        await update.message.reply_text("–ù–µ—Ç –æ—Ç—á–µ—Ç–æ–≤ –≤ —ç—Ç–æ–º —Ü–∏–∫–ª–µ.")
        return
    text = f"@{ADMIN_USERNAME}
"
    text += "üì§ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏, —á—Ç–æ –æ—Ç—á–µ—Ç—ã –ø–æ —ç—Ç–∏–º –ø—Ä–æ–µ–∫—Ç–∞–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã:
"
    text += "
".join(f"‚Ä¢ {p['project_name']} ‚Äî {p['responsible']}" for p in projects)
    await update.message.reply_text(text)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî ClientOpsBot.

"
        "–Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä–∞–º –æ–± –æ—Ç—á–µ—Ç–∞—Ö –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º:
"
        "‚Ä¢ –ó–∞ 5 –¥–Ω–µ–π –¥–æ –¥–∞—Ç—ã —Å–¥–∞—á–∏
"
        "‚Ä¢ –í –¥–µ–Ω—å —Å–¥–∞—á–∏ –æ—Ç—á–µ—Ç–∞

"
        "–ß—Ç–æ–±—ã –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:
"
        "/test_5days ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 5 –¥–Ω–µ–π
"
        "/test_today ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –¥–µ–Ω—å –æ—Ç—á–µ—Ç–∞

"
        "–ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –û–∂–∏–¥–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –≥—Ä–∞—Ñ–∏–∫–æ–º."
    )

async def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("test_5days", notify_5days))
    app.add_handler(CommandHandler("test_today", notify_today))
    app.add_handler(CommandHandler("report_1", report_1))
    app.add_handler(CommandHandler("report_5", report_5))

    await app.run_polling()

# –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤ —É–∂–µ —Ä–∞–±–æ—Ç–∞—é—â–µ–º event loop
async def runner():
    await main()

if __name__ == "__main__":
    try:
        loop = asyncio.get_event_loop()
        if loop.is_running():
            loop.create_task(runner())
        else:
            loop.run_until_complete(runner())
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:", e)
