import csv
import logging
import datetime
import asyncio
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
)

BOT_TOKEN = "8095206946:AAFlOJi0BoRr9Z-MJMigWkk6arT9Ck-uhRk"
CSV_PATH = "projects.csv"
RESPONSIBLE_TAG = "@ellobodefuego"
TIMEZONE_OFFSET = 3  # UTC+3 (–ú–æ—Å–∫–≤–∞)

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def read_projects():
    with open(CSV_PATH, encoding="utf-8") as f:
        reader = csv.DictReader(f)
        return list(reader)

def is_weekday(dt):
    return dt.weekday() < 5

def adjust_to_weekday(dt):
    while not is_weekday(dt):
        dt += datetime.timedelta(days=1)
    return dt

def format_project(project):
    return f"üîπ <b>{project['–ü—Ä–æ–µ–∫—Ç']}</b> ‚Äî –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {project['–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π']} ‚Äî –¥–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞: {project['–î–µ–Ω—å']} —á–∏—Å–ª–∞"

def get_today_projects(offset_days=0):
    today = datetime.datetime.now(datetime.timezone.utc) + datetime.timedelta(hours=TIMEZONE_OFFSET)
    target_day = (today + datetime.timedelta(days=offset_days)).day
    return [p for p in read_projects() if int(p["–î–µ–Ω—å"]) == target_day]

async def send_report_5(update: Update, context: ContextTypes.DEFAULT_TYPE):
    projects = get_today_projects()
    if not projects:
        await update.message.reply_text("–ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å –æ—Ç—á–µ—Ç–∞–º–∏.")
        return

    text = "<b>üìä –û—Ç—á–µ—Ç –≤ –∫–æ–Ω—Ü–µ –Ω–µ–¥–µ–ª–∏</b>\n\n"
    for project in projects:
        text += f"‚Ä¢ {format_project(project)}\n"
    text += f"\n{RESPONSIBLE_TAG}, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –æ—Ç—á–µ—Ç—ã –ø–æ —ç—Ç–∏–º –ø—Ä–æ–µ–∫—Ç–∞–º –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã."

    await update.message.reply_text(text, parse_mode="HTML")

async def send_report_1(update: Update, context: ContextTypes.DEFAULT_TYPE):
    projects = get_today_projects()
    if not projects:
        await update.message.reply_text("–ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å –æ—Ç—á–µ—Ç–∞–º–∏.")
        return

    text = "<b>üìå –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –æ—Ç—á–µ—Ç—ã –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ:</b>\n\n"
    for project in projects:
        text += f"‚Ä¢ {format_project(project)}\n"
    text += "\n–ù–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–∞–ø–æ–º–Ω–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞–º –æ–± –æ–ø–ª–∞—Ç–µ."

    await update.message.reply_text(text, parse_mode="HTML")

async def test_5days(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚è≥ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –¥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ –ø—Ä–æ–µ–∫—Ç—É –æ—Å—Ç–∞–ª–æ—Å—å 5 –¥–Ω–µ–π.")

async def test_today(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üì¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —Å–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Å–¥–∞—á–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ –ø—Ä–æ–µ–∫—Ç—É.")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî ClientOpsBot.\n\n"
        "–Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä–∞–º –æ–± –æ—Ç—á–µ—Ç–∞—Ö –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º:\n"
        "‚Ä¢ –ó–∞ 5 –¥–Ω–µ–π –¥–æ –¥–∞—Ç—ã —Å–¥–∞—á–∏\n"
        "‚Ä¢ –í –¥–µ–Ω—å —Å–¥–∞—á–∏ –æ—Ç—á–µ—Ç–∞\n\n"
        "–ß—Ç–æ–±—ã –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
        "/test_5days ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 5 –¥–Ω–µ–π\n"
        "/test_today ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –¥–µ–Ω—å –æ—Ç—á–µ—Ç–∞\n"
        "/report_1 ‚Äî –æ—Ç—á–µ—Ç –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –æ—Ç—á–µ—Ç–∞—Ö –Ω–∞ –Ω–µ–¥–µ–ª–µ\n"
        "/report_5 ‚Äî –æ—Ç—á–µ—Ç –≤ –∫–æ–Ω—Ü–µ –Ω–µ–¥–µ–ª–∏ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º\n\n"
        "–ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –û–∂–∏–¥–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –≥—Ä–∞—Ñ–∏–∫–æ–º."
    )
    await update.message.reply_text(msg)

def schedule_jobs(app):
    async def notify_5days(context: ContextTypes.DEFAULT_TYPE):
        today = datetime.datetime.now(datetime.timezone.utc) + datetime.timedelta(hours=TIMEZONE_OFFSET)
        target_date = today + datetime.timedelta(days=5)
        target_date = adjust_to_weekday(target_date)
        if today.date() == target_date.date():
            for p in get_today_projects(5):
                text = f"‚è≥ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –¥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ –ø—Ä–æ–µ–∫—Ç—É ¬´{p['–ü—Ä–æ–µ–∫—Ç']}¬ª –æ—Å—Ç–∞–ª–æ—Å—å 5 –¥–Ω–µ–π. –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {p['–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π']}"
                await context.bot.send_message(chat_id=context.job.chat_id, text=text)

    async def notify_today(context: ContextTypes.DEFAULT_TYPE):
        today = datetime.datetime.now(datetime.timezone.utc) + datetime.timedelta(hours=TIMEZONE_OFFSET)
        target_date = adjust_to_weekday(today)
        if today.date() == target_date.date():
            for p in get_today_projects(0):
                text = f"üì¢ –°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Å–¥–∞—á–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ –ø—Ä–æ–µ–∫—Ç—É ¬´{p['–ü—Ä–æ–µ–∫—Ç']}¬ª. –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {p['–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π']}"
                await context.bot.send_message(chat_id=context.job.chat_id, text=text)

    job_queue = app.job_queue
    job_queue.run_daily(notify_5days, time=datetime.time(9, 0), days=(0,))
    job_queue.run_daily(notify_today, time=datetime.time(9, 0), days=(4,))

async def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("test_5days", test_5days))
    app.add_handler(CommandHandler("test_today", test_today))
    app.add_handler(CommandHandler("report_1", send_report_1))
    app.add_handler(CommandHandler("report_5", send_report_5))

    schedule_jobs(app)
    logger.info("–ó–∞–ø—É—Å–∫ ClientOpsBot...")
    await app.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
