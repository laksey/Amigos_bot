import csv
import datetime
import logging
import asyncio

from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

# === –ö–æ–Ω—Ñ–∏–≥ ===
BOT_TOKEN = "8095206946:AAFlOJi0BoRr9Z-MJMigWkk6arT9Ck-uhRk"
CSV_FILE = "projects.csv"
TIMEZONE = datetime.timezone(datetime.timedelta(hours=3))  # –ú–æ—Å–∫–≤–∞

# === –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# === –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ CSV ===
def load_projects():
    projects = []
    with open(CSV_FILE, encoding="utf-8") as f:
        reader = csv.DictReader(f)
        for row in reader:
            try:
                day = int(row["–î–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞"])
                today = datetime.datetime.now(TIMEZONE)
                date = datetime.date(today.year, today.month, day)
                projects.append({
                    "name": row["–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞"],
                    "responsible": row["–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π"],
                    "date": date,
                })
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ CSV: {row} ‚Äî {e}")
    return projects

# === –ö–æ–º–∞–Ω–¥—ã ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("ClientOpsBot –∑–∞–ø—É—â–µ–Ω. –ö–æ–º–∞–Ω–¥—ã: /report_week, /report_month")

async def report_week(update: Update, context: ContextTypes.DEFAULT_TYPE):
    today = datetime.datetime.now(TIMEZONE).date()
    start = today - datetime.timedelta(days=today.weekday())
    end = start + datetime.timedelta(days=6)
    projects = [p for p in load_projects() if start <= p["date"] <= end]
    if projects:
        text = "üìå –ü—Ä–æ–µ–∫—Ç—ã –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ:\n" + "\n".join(
            [f"‚Ä¢ {p['name']} ‚Äî {p['responsible']} (–¥–æ {p['date'].day})" for p in projects]
        )
    else:
        text = "‚úÖ –ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç."
    await update.message.reply_text(text)

async def report_month(update: Update, context: ContextTypes.DEFAULT_TYPE):
    today = datetime.datetime.now(TIMEZONE).date()
    start = today.replace(day=1)
    end = (start + datetime.timedelta(days=32)).replace(day=1) - datetime.timedelta(days=1)
    projects = [p for p in load_projects() if start <= p["date"] <= end]
    if projects:
        text = "üìä –û—Ç—á–µ—Ç—ã –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ:\n" + "\n".join(
            [f"‚Ä¢ {p['name']} ‚Äî {p['responsible']} (–¥–æ {p['date'].day})" for p in projects]
        )
    else:
        text = "‚úÖ –í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ –Ω–µ—Ç."
    await update.message.reply_text(text)

# === –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ===
async def notify(context: ContextTypes.DEFAULT_TYPE, days_before: int):
    today = datetime.datetime.now(TIMEZONE).date()
    target = today + datetime.timedelta(days=days_before)
    projects = [p for p in load_projects() if p["date"] == target]
    for p in projects:
        msg = f"üì¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –æ—Ç—á–µ—Ç –ø–æ {p['name']} —á–µ—Ä–µ–∑ {days_before} –¥–Ω–µ–π. –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {p['responsible']}"
        await context.bot.send_message(chat_id=p["responsible"], text=msg)

# === –ì–ª–∞–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ===
async def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("report_week", report_week))
    app.add_handler(CommandHandler("report_month", report_month))

    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler = AsyncIOScheduler(timezone=TIMEZONE)
    scheduler.add_job(notify, CronTrigger(day_of_week="mon", hour=9), kwargs={"context": app, "days_before": 5})
    scheduler.add_job(notify, CronTrigger(day_of_week="fri", hour=9), kwargs={"context": app, "days_before": 0})
    scheduler.start()

    logger.info("‚úÖ ClientOpsBot –∑–∞–ø—É—â–µ–Ω.")
    await app.run_polling()

# === –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    asyncio.run(main())
