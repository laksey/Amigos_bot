
import logging
import asyncio
import datetime
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ID —á–∞—Ç–∞ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –Ω—É–∂–Ω—ã–π)
CHAT_ID = None

# –ö–æ–º–∞–Ω–¥—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global CHAT_ID
    CHAT_ID = update.effective_chat.id
    logger.info(f"Start command received in chat: {CHAT_ID}")
    await context.bot.send_message(chat_id=CHAT_ID, text="""üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî ClientOpsBot.

–Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä–∞–º –æ–± –æ—Ç—á–µ—Ç–∞—Ö –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º:
‚Ä¢ –ó–∞ 5 –¥–Ω–µ–π –¥–æ –¥–∞—Ç—ã —Å–¥–∞—á–∏
‚Ä¢ –í –¥–µ–Ω—å —Å–¥–∞—á–∏ –æ—Ç—á–µ—Ç–∞

–ß—Ç–æ–±—ã –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:
/test_5days ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 5 –¥–Ω–µ–π
/test_today ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –¥–µ–Ω—å –æ—Ç—á–µ—Ç–∞

–ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –û–∂–∏–¥–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –≥—Ä–∞—Ñ–∏–∫–æ–º.
""")

async def test_5days(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(chat_id=update.effective_chat.id, text="üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –æ—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–µ–∫—Ç—É —á–µ—Ä–µ–∑ 5 –¥–Ω–µ–π.")

async def test_today(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(chat_id=update.effective_chat.id, text="üö® –°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Å–¥–∞—á–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ –ø—Ä–æ–µ–∫—Ç—É!")

async def weekly_start(context: ContextTypes.DEFAULT_TYPE):
    if CHAT_ID:
        await context.bot.send_message(chat_id=CHAT_ID, text="üìä –ù–∞–ø–æ–º–∏–Ω–∞—é: –Ω–æ–≤–∞—è –Ω–µ–¥–µ–ª—è, –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è!")

async def weekly_end(context: ContextTypes.DEFAULT_TYPE):
    if CHAT_ID:
        await context.bot.send_message(chat_id=CHAT_ID, text="‚úÖ –ò—Ç–æ–≥–∏ –Ω–µ–¥–µ–ª–∏: –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Ç—á–∏—Ç–∞—Ç—å—Å—è!")

async def main():
    app = ApplicationBuilder().token("8095206946:AAFlOJi0BoRr9Z-MJMigWkk6arT9Ck-uhRk").build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("test_5days", test_5days))
    app.add_handler(CommandHandler("test_today", test_today))

    # –£–¥–∞–ª–µ–Ω–∏–µ webhook
    await app.bot.delete_webhook(drop_pending_updates=True)

    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler = AsyncIOScheduler()
    scheduler.add_job(weekly_start, "cron", hour=9, day_of_week="mon", args=[app])
    scheduler.add_job(weekly_end, "cron", hour=18, day_of_week="fri", args=[app])
    scheduler.start()

    logger.info("Bot is starting polling...")
    await app.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
