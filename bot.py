import logging
import datetime
import asyncio
import nest_asyncio

from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters
)
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω
TOKEN = "8095206946:AAFlOJi0BoRr9Z-MJMigWkk6arT9Ck-uhRk"

# –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö
projects = [
    {"name": "–ü—Ä–æ–µ–∫—Ç –ê", "owner": "@username1", "report_day": "2025-07-10"},
    {"name": "–ü—Ä–æ–µ–∫—Ç B", "owner": "@username2", "report_day": "2025-07-12"},
]

# –•–µ–Ω–¥–ª–µ—Ä—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚úÖ ClientOpsBot –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")

async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(f"–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: {update.message.text}")

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
async def notify_5days(context: ContextTypes.DEFAULT_TYPE):
    today = datetime.date.today()
    for project in projects:
        report_day = datetime.datetime.strptime(project["report_day"], "%Y-%m-%d").date()
        if (report_day - today).days == 5:
            await context.bot.send_message(
                chat_id=project["owner"],
                text=f"üîî –ß–µ—Ä–µ–∑ 5 –¥–Ω–µ–π –ø–æ –ø—Ä–æ–µ–∫—Ç—É ¬´{project['name']}¬ª –¥–µ–¥–ª–∞–π–Ω –æ—Ç—á—ë—Ç–∞!"
            )

async def notify_today(context: ContextTypes.DEFAULT_TYPE):
    today = datetime.date.today()
    for project in projects:
        report_day = datetime.datetime.strptime(project["report_day"], "%Y-%m-%d").date()
        if report_day == today:
            await context.bot.send_message(
                chat_id=project["owner"],
                text=f"üìÖ –°–µ–≥–æ–¥–Ω—è –æ—Ç—á—ë—Ç –ø–æ –ø—Ä–æ–µ–∫—Ç—É ¬´{project['name']}¬ª!"
            )

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))

    scheduler = AsyncIOScheduler()
    scheduler.add_job(notify_5days, CronTrigger(day_of_week="mon", hour=9, minute=0), args=[app])
    scheduler.add_job(notify_today, CronTrigger(day_of_week="fri", hour=9, minute=0), args=[app])
    scheduler.start()

    logger.info("–ó–∞–ø—É—Å–∫ ClientOpsBot...")
    await app.initialize()
    await app.start()
    await app.updater.start_polling()
    await app.updater.idle()

# –ó–∞–ø—É—Å–∫ –±–µ–∑ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ —Å —É–∂–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–º loop
if __name__ == "__main__":
    nest_asyncio.apply()
    loop = asyncio.get_event_loop()
    loop.create_task(main())
    loop.run_forever()
