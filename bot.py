import logging
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from telegram.constants import ParseMode
import datetime
import csv
import random

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = "8095206946:AAFlOJi0BoRr9Z-MJMigWkk6arT9Ck-uhRk"
CSV_FILE = "projects.csv"
ADMIN_NICK = "@ellobodefuego"

# –ù–∞—Å—Ç—Ä–æ–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ß—Ç–µ–Ω–∏–µ CSV
def load_projects():
    with open(CSV_FILE, newline='', encoding='utf-8') as csvfile:
        reader = csv.DictReader(csvfile)
        return list(reader)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ –¥–Ω—é
def get_projects_by_day(day: int):
    projects = load_projects()
    today_projects = [p for p in projects if p["–î–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞"].isdigit() and int(p["–î–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞"]) == day]
    return today_projects

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∑–∞ 5 –¥–Ω–µ–π –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞
def get_projects_in_5_days():
    today = datetime.date.today()
    target_day = (today + datetime.timedelta(days=5)).day
    projects = load_projects()
    return [p for p in projects if p["–î–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞"].isdigit() and int(p["–î–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞"]) == target_day]

# –ö–æ–º–∞–Ω–¥—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = """
üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî ClientOpsBot.

–Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä–∞–º –æ–± –æ—Ç—á–µ—Ç–∞—Ö –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º:
‚Ä¢ –ó–∞ 5 –¥–Ω–µ–π –¥–æ –¥–∞—Ç—ã —Å–¥–∞—á–∏
‚Ä¢ –í –¥–µ–Ω—å —Å–¥–∞—á–∏ –æ—Ç—á–µ—Ç–∞
‚Ä¢ –í –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ ‚Äî —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤, —É –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –¥–µ–¥–ª–∞–π–Ω
‚Ä¢ –í –ø—è—Ç–Ω–∏—Ü—É ‚Äî —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–¥–∞—á—É

–¢–µ—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/test_5days ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 5 –¥–Ω–µ–π
/test_today ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –¥–µ–Ω—å –æ—Ç—á–µ—Ç–∞
/weekly_start ‚Äî —Ä—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏—á–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
/weekly_end ‚Äî —Ä—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –ø—è—Ç–Ω–∏—á–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
"""
    await update.message.reply_text(msg)

async def test_today(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await notify_today(context)

async def test_5days(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await notify_5days(context)

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –¥–µ–Ω—å –æ—Ç—á–µ—Ç–∞
async def notify_today(context: ContextTypes.DEFAULT_TYPE):
    today = datetime.date.today().day
    projects = get_projects_by_day(today)
    if not projects:
        return

    msg = "üìç *–°–µ–≥–æ–¥–Ω—è –∫—Ä–∞–π–Ω–∏–π —Å—Ä–æ–∫ —Å–¥–∞—á–∏ –æ—Ç—á–µ—Ç–æ–≤ –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º:*\n"
    for p in projects:
        msg += f"- {p['–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞']} ({p['–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π']})\n"

    await context.bot.send_message(chat_id=context._chat_id, text=msg, parse_mode=ParseMode.MARKDOWN)

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ 5 –¥–Ω–µ–π
async def notify_5days(context: ContextTypes.DEFAULT_TYPE):
    projects = get_projects_in_5_days()
    if not projects:
        return

    msg = "‚è≥ *–ß–µ—Ä–µ–∑ 5 –¥–Ω–µ–π –Ω—É–∂–Ω–æ —Å–¥–∞—Ç—å –æ—Ç—á–µ—Ç—ã –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º:*\n"
    for p in projects:
        msg += f"- {p['–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞']} ({p['–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π']})\n"

    await context.bot.send_message(chat_id=context._chat_id, text=msg, parse_mode=ParseMode.MARKDOWN)

# –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ –Ω–∞—á–∞–ª–æ (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)
async def weekly_start(update: Update = None, context: ContextTypes.DEFAULT_TYPE = None):
    projects = load_projects()
    today = datetime.date.today()
    week_days = [(today + datetime.timedelta(days=i)).day for i in range(7)]
    weekly_projects = [p for p in projects if p["–î–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞"].isdigit() and int(p["–î–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞"]) in week_days]

    if not weekly_projects:
        return

    msg = "üóì *–ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –Ω—É–∂–Ω–æ —Å–¥–∞—Ç—å –æ—Ç—á–µ—Ç—ã –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º:*\n"
    for p in weekly_projects:
        msg += f"- {p['–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞']} ({p['–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π']}) ‚Äî {p['–î–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞']} —á–∏—Å–ª–∞\n"

    await context.bot.send_message(chat_id=context._chat_id, text=msg, parse_mode=ParseMode.MARKDOWN)

# –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ (–ø—è—Ç–Ω–∏—Ü–∞)
async def weekly_end(update: Update = None, context: ContextTypes.DEFAULT_TYPE = None):
    projects = load_projects()
    today = datetime.date.today()
    week_days = [(today - datetime.timedelta(days=i)).day for i in range(7)]
    reported_projects = [p for p in projects if p["–î–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞"].isdigit() and int(p["–î–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞"]) in week_days]

    if not reported_projects:
        return

    msg = f"üîî *–ó–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è –Ω–µ–¥–µ–ª—è.* {ADMIN_NICK}, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –æ—Ç—á–µ—Ç—ã —Å–¥–∞–Ω—ã –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º:\n"
    for p in reported_projects:
        msg += f"- {p['–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞']} ({p['–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π']}) ‚Äî {p['–î–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞']} —á–∏—Å–ª–∞\n"

    await context.bot.send_message(chat_id=context._chat_id, text=msg, parse_mode=ParseMode.MARKDOWN)

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("test_today", test_today))
    app.add_handler(CommandHandler("test_5days", test_5days))
    app.add_handler(CommandHandler("weekly_start", weekly_start))
    app.add_handler(CommandHandler("weekly_end", weekly_end))

    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    app.job_queue.run_daily(notify_today, time=datetime.time(9, 0))
    app.job_queue.run_daily(notify_5days, time=datetime.time(10, 0))
    app.job_queue.run_daily(weekly_start, time=datetime.time(9, 0), days=(0,))
    app.job_queue.run_daily(weekly_end, time=datetime.time(18, 0), days=(4,))

    await app.initialize()
    await app.start()
    await app.updater.start_polling()
    await app.updater.idle()

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
