import datetime
import asyncio
from telegram import Bot
from telegram.ext import Application, CommandHandler
import csv
import random

TOKEN = "8095206946:AAFlOJi0BoRr9Z-MJMigWkk6arT9Ck-uhRk"
PROJECTS_CSV = "projects.csv"
ADMIN_NICK = "@ellobodefuego"


def get_projects():
    projects = []
    with open(PROJECTS_CSV, newline='', encoding='utf-8') as csvfile:
        reader = csv.DictReader(csvfile)
        for row in reader:
            projects.append({
                "–ü—Ä–æ–µ–∫—Ç": row["–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞"],
                "–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π": row["–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π (–Ω–∏–∫ —Ç–≥)"],
                "–î–∞—Ç–∞": row["–¥–∞—Ç–∞ —Å–¥–∞—á–∏"]
            })
    return projects


def get_this_week_reports():
    today = datetime.date.today()
    return [p for p in get_projects() if int(p["–î–∞—Ç–∞"]) == today.day]


def get_last_week_reports():
    today = datetime.date.today()
    last_week = today - datetime.timedelta(days=7)
    return [p for p in get_projects() if int(p["–î–∞—Ç–∞"]) == last_week.day]


async def send_monday_report(update, context):
    this_week = get_this_week_reports()
    last_week = get_last_week_reports()

    msg = "üìù –ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –Ω—É–∂–Ω–æ —Å–¥–∞—Ç—å –æ—Ç—á–µ—Ç—ã:\n"
    for p in this_week:
        msg += f"‚Äî *{p['–ü—Ä–æ–µ–∫—Ç']}* ({p['–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π']})\n"

    msg += "\nüí∏ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º —Å –æ—Ç—á–µ—Ç–∞–º–∏ –Ω–∞ –ø—Ä–æ—à–ª–æ–π –Ω–µ–¥–µ–ª–µ:\n"
    for p in last_week:
        msg += f"‚Äî *{p['–ü—Ä–æ–µ–∫—Ç']}* ({p['–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π']})\n"

    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=msg,
        parse_mode="Markdown"
    )


async def send_confirmation_request(update, context):
    last_week = get_last_week_reports()
    msg = f"üîÅ –ó–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è –Ω–µ–¥–µ–ª—è. {ADMIN_NICK}, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á—Ç–æ –æ—Ç—á–µ—Ç—ã —Å–¥–∞–Ω—ã:\n"
    for p in last_week:
        msg += f"‚Äî *{p['–ü—Ä–æ–µ–∫—Ç']}* ({p['–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π']})\n"
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=msg,
        parse_mode="Markdown"
    )


def test_random_data():
    with open(PROJECTS_CSV, 'w', newline='', encoding='utf-8') as csvfile:
        fieldnames = ["–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞", "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π (–Ω–∏–∫ —Ç–≥)", "–¥–∞—Ç–∞ —Å–¥–∞—á–∏"]
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
        writer.writeheader()
        for i in range(5):
            writer.writerow({
                "–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞": f"–ü—Ä–æ–µ–∫—Ç {i+1}",
                "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π (–Ω–∏–∫ —Ç–≥)": f"@user{i+1}",
                "–¥–∞—Ç–∞ —Å–¥–∞—á–∏": str(random.randint(1, 31))
            })


async def main():
    test_random_data()

    application = Application.builder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", send_monday_report))
    application.add_handler(CommandHandler("confirm", send_confirmation_request))
    await application.run_polling()


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
if __name__ == "__main__":
    try:
        asyncio.get_running_loop().create_task(main())
    except RuntimeError:
        asyncio.run(main())
