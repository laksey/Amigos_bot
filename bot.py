import csv
import datetime
import logging
import asyncio

from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes
)

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

CSV_FILE = 'projects.csv'
TIMEZONE = datetime.timezone(datetime.timedelta(hours=3))  # –ú–æ—Å–∫–≤–∞
BOT_TOKEN = "8095206946:AAFlOJi0BoRr9Z-MJMigWkk6arT9Ck-uhRk"

# --- –£—Ç–∏–ª–∏—Ç—ã ---
def read_csv_rows(file_path):
    with open(file_path, newline='', encoding='utf-8') as csvfile:
        return list(csv.reader(csvfile))

def shift_if_weekend(date):
    while date.weekday() >= 5:  # –°–±-–í—Å
        date += datetime.timedelta(days=1)
    return date

def load_projects():
    today = datetime.datetime.now(TIMEZONE).date()
    projects = []
    for row in read_csv_rows(CSV_FILE):
        name = row[0].strip()
        responsible = row[1].strip()
        try:
            report_day = int(row[2].strip())
            report_date = today.replace(day=1) + datetime.timedelta(days=report_day - 1)
            report_date = shift_if_weekend(report_date)
            if report_date < today:
                next_month = (today.replace(day=28) + datetime.timedelta(days=4)).replace(day=1)
                report_date = next_month.replace(day=report_day)
                report_date = shift_if_weekend(report_date)
            projects.append({'name': name, 'responsible': responsible, 'date': report_date})
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ: {row} ‚Äî {e}")
    return projects

# --- –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ---
async def notify_5days(context: ContextTypes.DEFAULT_TYPE):
    today = datetime.datetime.now(TIMEZONE).date()
    projects = [p for p in load_projects() if (p['date'] - today).days == 5]
    for p in projects:
        await context.bot.send_message(
            chat_id=context.job.chat_id,
            text=f"üîî –ß–µ—Ä–µ–∑ 5 –¥–Ω–µ–π –Ω—É–∂–Ω–æ —Å–¥–∞—Ç—å –æ—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–µ–∫—Ç—É {p['name']}.\n–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {p['responsible']}"
        )

async def notify_today(context: ContextTypes.DEFAULT_TYPE):
    today = datetime.datetime.now(TIMEZONE).date()
    projects = [p for p in load_projects() if p['date'] == today]
    for p in projects:
        await context.bot.send_message(
            chat_id=context.job.chat_id,
            text=f"‚ö†Ô∏è –°–µ–≥–æ–¥–Ω—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–µ–∫—Ç—É {p['name']}.\n–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {p['responsible']}"
        )

# --- –ö–æ–º–∞–Ω–¥—ã ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî ClientOpsBot.\n\n"
        "–Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä–∞–º –æ–± –æ—Ç—á–µ—Ç–∞—Ö:\n"
        "‚Ä¢ –ó–∞ 5 –¥–Ω–µ–π –¥–æ –¥–∞—Ç—ã —Å–¥–∞—á–∏\n"
        "‚Ä¢ –í –¥–µ–Ω—å —Å–¥–∞—á–∏ –æ—Ç—á–µ—Ç–∞\n\n"
        "–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ç–µ—Å—Ç–∞:\n"
        "/test_5days ‚Äî –∑–∞ 5 –¥–Ω–µ–π\n"
        "/test_today ‚Äî –≤ –¥–µ–Ω—å —Å–¥–∞—á–∏\n"
        "/report_1 ‚Äî –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ\n"
        "/report_5 ‚Äî –∏—Ç–æ–≥–∏ –º–µ—Å—è—Ü–∞ + @ellobodefuego"
    )

async def test_5days(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.job = type("Job", (), {"chat_id": update.message.chat_id})
    await notify_5days(context)

async def test_today(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.job = type("Job", (), {"chat_id": update.message.chat_id})
    await notify_today(context)

async def report_1(update: Update, context: ContextTypes.DEFAULT_TYPE):
    today = datetime.datetime.now(TIMEZONE).date()
    end = today + datetime.timedelta(days=(6 - today.weekday()))
    projects = [p for p in load_projects() if today <= p['date'] <= end]
    if projects:
        text = "üóì –û—Ç—á–µ—Ç—ã –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ:\n"
        text += "\n".join([f"‚Ä¢ {p['name']} ‚Äî {p['responsible']} (–¥–æ {p['date'].day})" for p in projects])
        text += "\n\n–ù–∞–ø–æ–º–Ω–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞–º –æ–± –æ–ø–ª–∞—Ç–µ."
    else:
        text = "‚úÖ –ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ —Å–¥–∞—á–∞ –æ—Ç—á–µ—Ç–æ–≤ –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞."
    await update.message.reply_text(text)

async def report_5(update: Update, context: ContextTypes.DEFAULT_TYPE):
    today = datetime.datetime.now(TIMEZONE).date()
    start = today.replace(day=1)
    end = (start + datetime.timedelta(days=32)).replace(day=1) - datetime.timedelta(days=1)
    projects = [p for p in load_projects() if start <= p['date'] <= end]
    if projects:
        text = "üìä –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ:\n"
        text += "\n".join([f"‚Ä¢ {p['name']} ‚Äî {p['responsible']} (–¥–æ {p['date'].day})" for p in projects])
        text += "\n\n@ellobodefuego, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –æ—Ç—á–µ—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã."
    else:
        text = "‚úÖ –í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å –æ—Ç—á–µ—Ç–∞–º–∏."
    await update.message.reply_text(text)

# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("test_5days", test_5days))
    app.add_handler(CommandHandler("test_today", test_today))
    app.add_handler(CommandHandler("report_1", report_1))
    app.add_handler(CommandHandler("report_5", report_5))

    scheduler = AsyncIOScheduler(timezone=TIMEZONE)
    scheduler.add_job(notify_5days, CronTrigger(day_of_week='mon', hour=9, minute=0), kwargs={"context": app})
    scheduler.add_job(notify_today, CronTrigger(day_of_week='fri', hour=9, minute=0), kwargs={"context": app})
    scheduler.start()

    logger.info("–ó–∞–ø—É—Å–∫ ClientOpsBot...")
    await app.run_polling()

# --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–ï–ó asyncio.run ---
if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.create_task(main())

    try:
        loop.run_forever()
    except KeyboardInterrupt:
        print("‚èπÔ∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")
