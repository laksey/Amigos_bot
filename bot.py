import logging
import datetime
import csv
import asyncio
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = "8095206946:AAFlOJi0BoRr9Z-MJMigWkk6arT9Ck-uhRk"

# –ü—É—Ç—å –∫ CSV-—Ñ–∞–π–ª—É
CSV_PATH = "projects.csv"

# –ß–∞—Ç, –∫—É–¥–∞ —Å–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–∑–∞–º–µ–Ω–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
TARGET_CHAT_ID = None  # –±—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª—ë–Ω –≤ /start

def read_projects():
    try:
        with open(CSV_PATH, newline='', encoding="utf-8") as csvfile:
            reader = csv.DictReader(csvfile)
            return list(reader)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è CSV: {e}")
        return []

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global TARGET_CHAT_ID
    TARGET_CHAT_ID = update.effective_chat.id
    logger.info(f"/start –æ—Ç {TARGET_CHAT_ID}")
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî ClientOpsBot.\n"
        "–Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ–± –æ—Ç—á–µ—Ç–∞—Ö –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º:\n"
        "‚Ä¢ –ó–∞ 5 –¥–Ω–µ–π –¥–æ —Å–¥–∞—á–∏\n"
        "‚Ä¢ –í –¥–µ–Ω—å —Å–¥–∞—á–∏\n\n"
        "–¢–µ—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/test_5days ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 5 –¥–Ω–µ–π\n"
        "/test_today ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –¥–µ–Ω—å —Å–¥–∞—á–∏\n"
        "/weekly_start ‚Äî —Ç–µ—Å—Ç –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞\n"
        "/weekly_end ‚Äî —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–µ–¥–µ–ª–∏"
    )

# –ü—Ä–æ–≤–µ—Ä–∫–∞ 5-–¥–Ω–µ–≤–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
async def test_5days(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("/test_5days –≤—ã–∑–≤–∞–Ω")
    await update.message.reply_text("üîî –¢–µ—Å—Ç: –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 5 –¥–Ω–µ–π –¥–æ –æ—Ç—á–µ—Ç–∞")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –¥–µ–Ω—å —Å–¥–∞—á–∏
async def test_today(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("/test_today –≤—ã–∑–≤–∞–Ω")
    await update.message.reply_text("üì£ –¢–µ—Å—Ç: –æ—Ç—á–µ—Ç –Ω—É–∂–Ω–æ —Å–¥–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è!")

# –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π —Å—Ç–∞—Ä—Ç ‚Äî –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
async def weekly_start(context: ContextTypes.DEFAULT_TYPE):
    logger.info("–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π —Å—Ç–∞—Ä—Ç ‚Äî –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –æ—Ç—á–µ—Ç–æ–≤")
    projects = read_projects()
    today = datetime.date.today()
    msg_lines = ["üìù *–ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –Ω—É–∂–Ω–æ —Å–¥–∞—Ç—å –æ—Ç—á–µ—Ç—ã:*"]
    for proj in projects:
        try:
            due_day = int(proj.get("–î–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞", "").strip())
            if due_day >= today.day:
                msg_lines.append(f"- {proj['–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞']} ‚Äî @{proj['–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π']}")
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏: {e}")
    msg = "\n".join(msg_lines)
    await context.bot.send_message(chat_id=TARGET_CHAT_ID, text=msg, parse_mode="Markdown")

# –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ ‚Äî –ø—è—Ç–Ω–∏—Ü–∞
async def weekly_end(context: ContextTypes.DEFAULT_TYPE):
    logger.info("–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤")
    projects = read_projects()
    today = datetime.date.today()
    msg_lines = ["üì§ *–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–ª–µ–¥—É—é—â–∏—Ö –æ—Ç—á–µ—Ç–æ–≤:*"]
    for proj in projects:
        try:
            due_day = int(proj.get("–î–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞", "").strip())
            if due_day <= today.day:
                msg_lines.append(f"- {proj['–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞']} ‚Äî @{proj['–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π']}")
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏: {e}")
    msg = "\n".join(msg_lines)
    await context.bot.send_message(chat_id=TARGET_CHAT_ID, text=msg, parse_mode="Markdown")

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
async def weekly_start_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("/weekly_start –≤—ã–∑–≤–∞–Ω –≤—Ä—É—á–Ω—É—é")
    await weekly_start(context)

async def weekly_end_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("/weekly_end –≤—ã–∑–≤–∞–Ω –≤—Ä—É—á–Ω—É—é")
    await weekly_end(context)

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
async def main():
    app = Application.builder().token(TOKEN).build()

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("test_5days", test_5days))
    app.add_handler(CommandHandler("test_today", test_today))
    app.add_handler(CommandHandler("weekly_start", weekly_start_cmd))
    app.add_handler(CommandHandler("weekly_end", weekly_end_cmd))

    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
    app.job_queue.run_daily(weekly_start, time=datetime.time(9, 0), days=(0,))  # –ü–Ω
    app.job_queue.run_daily(weekly_end, time=datetime.time(18, 0), days=(4,))   # –ü—Ç

    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è‚Ä¶")
    await app.initialize()
    await app.start()
    await app.updater.start_polling()
    await app.updater.idle()

if __name__ == "__main__":
    asyncio.run(main())
