import logging
import asyncio
import csv
import datetime
from telegram import Update, Bot
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

TOKEN = "8095206946:AAFlOJi0BoRr9Z-MJMigWkk6arT9Ck-uhRk"
CSV_FILE = "projects.csv"
ADMIN_MENTION = "@ellobodefuego"
CHAT_ID_FILE = "chat_id.txt"

logging.basicConfig(level=logging.INFO)

def read_projects():
    projects = []
    try:
        with open(CSV_FILE, encoding="utf-8") as file:
            reader = csv.DictReader(file)
            for row in reader:
                projects.append({
                    "name": row.get("–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞", "").strip(),
                    "tg_nick": row.get("–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π (—Ç–µ–ª–µ–≥—Ä–∞–º –Ω–∏–∫)", "").strip(),
                    "report_date": row.get("–î–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞", "").strip(),
                })
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ CSV: {e}")
    return projects

def get_weekly_report():
    today = datetime.date.today()
    projects = read_projects()
    this_week = []
    for project in projects:
        try:
            date = datetime.datetime.strptime(project["report_date"], "%d.%m.%Y").date()
            if today <= date <= today + datetime.timedelta(days=6):
                this_week.append(f"- {project['name']} ({project['tg_nick']}) ‚Äî {project['report_date']}")
        except:
            continue
    if not this_week:
        return "–ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤."
    return "üìù –ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –Ω—É–∂–Ω–æ —Å–¥–∞—Ç—å –æ—Ç—á–µ—Ç—ã:
" + "
".join(this_week)

def get_payment_reminders():
    today = datetime.date.today()
    last_week = today - datetime.timedelta(days=7)
    projects = read_projects()
    unpaid = []
    for project in projects:
        try:
            date = datetime.datetime.strptime(project["report_date"], "%d.%m.%Y").date()
            if last_week <= date < today:
                unpaid.append(f"- {project['name']} ({project['tg_nick']}) ‚Äî {project['report_date']}")
        except:
            continue
    if not unpaid:
        return "–ù–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤, –ø–æ –∫–æ—Ç–æ—Ä—ã–º —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ."
    return "üí∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ –ø–æ –æ—Ç—á–µ—Ç–∞–º –ø—Ä–æ—à–ª–æ–π –Ω–µ–¥–µ–ª–∏:
" + "
".join(unpaid)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    with open(CHAT_ID_FILE, "w") as f:
        f.write(str(update.effective_chat.id))
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî ClientOpsBot.

"
        "–Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä–∞–º –æ–± –æ—Ç—á–µ—Ç–∞—Ö –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º:
"
        "‚Ä¢ –ó–∞ 5 –¥–Ω–µ–π –¥–æ –¥–∞—Ç—ã —Å–¥–∞—á–∏
"
        "‚Ä¢ –í –¥–µ–Ω—å —Å–¥–∞—á–∏ –æ—Ç—á–µ—Ç–∞

"
        "–ß—Ç–æ–±—ã –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:
"
        "/test_5days ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 5 –¥–Ω–µ–π
"
        "/test_today ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –¥–µ–Ω—å –æ—Ç—á–µ—Ç–∞
"
        "/weekly_start ‚Äî —Ç–µ—Å—Ç –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞
"
        "/weekly_end ‚Äî —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–∞—é—â–µ–≥–æ –æ—Ç—á–µ—Ç–∞

"
        "–ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –û–∂–∏–¥–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –≥—Ä–∞—Ñ–∏–∫–æ–º."
    )

async def test_5days(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üîî –¢–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –¥–æ –æ—Ç—á–µ—Ç–∞ 5 –¥–Ω–µ–π.")

async def test_today(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üì¢ –¢–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –æ—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–µ–∫—Ç—É –Ω—É–∂–Ω–æ —Å–¥–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è!")

async def weekly_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = get_weekly_report() + "

" + get_payment_reminders()
    await update.message.reply_text(msg)

async def weekly_end(update: Update, context: ContextTypes.DEFAULT_TYPE):
    projects = read_projects()
    msg = f"üìå –ó–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è –Ω–µ–¥–µ–ª—è. {ADMIN_MENTION}, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á—Ç–æ –æ—Ç—á–µ—Ç—ã —Å–¥–∞–Ω—ã –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –ø—Ä–æ–µ–∫—Ç–∞–º:
"
    for p in projects:
        try:
            date = datetime.datetime.strptime(p['report_date'], "%d.%m.%Y").date()
            if datetime.date.today() - datetime.timedelta(days=6) <= date <= datetime.date.today():
                msg += f"- {p['name']} ({p['tg_nick']}) ‚Äî {p['report_date']}
"
        except:
            continue
    await update.message.reply_text(msg)

async def scheduled_tasks(application):
    chat_id = None
    try:
        with open(CHAT_ID_FILE) as f:
            chat_id = int(f.read().strip())
    except Exception as e:
        logging.error("–§–∞–π–ª chat_id.txt –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –≤ —á–∞—Ç–µ —Å –±–æ—Ç–æ–º.")
        return

    scheduler = AsyncIOScheduler(timezone="Europe/Moscow")
    scheduler.add_job(lambda: application.bot.send_message(chat_id, get_weekly_report() + "

" + get_payment_reminders()), CronTrigger(day_of_week="mon", hour=9, minute=0))
    scheduler.add_job(lambda: application.bot.send_message(chat_id, f"üìå –ó–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è –Ω–µ–¥–µ–ª—è. {ADMIN_MENTION}, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á—Ç–æ –æ—Ç—á–µ—Ç—ã —Å–¥–∞–Ω—ã."), CronTrigger(day_of_week="fri", hour=18, minute=0))

    # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞ 5 –¥–Ω–µ–π –∏ –≤ –¥–µ–Ω—å –æ—Ç—á–µ—Ç–∞
    async def report_notifications():
        today = datetime.date.today()
        projects = read_projects()
        for p in projects:
            try:
                date = datetime.datetime.strptime(p['report_date'], "%d.%m.%Y").date()
                if date == today + datetime.timedelta(days=5):
                    await application.bot.send_message(chat_id, f"üîî –ß–µ—Ä–µ–∑ 5 –¥–Ω–µ–π —Å–¥–∞—á–∞ –æ—Ç—á–µ—Ç–∞: {p['name']} ({p['tg_nick']}) ‚Äî {p['report_date']}")
                elif date == today:
                    await application.bot.send_message(chat_id, f"üì¢ –°–µ–≥–æ–¥–Ω—è —Å–¥–∞—á–∞ –æ—Ç—á–µ—Ç–∞: {p['name']} ({p['tg_nick']}) ‚Äî {p['report_date']}")
            except:
                continue

    scheduler.add_job(lambda: asyncio.create_task(report_notifications()), CronTrigger(hour=10, minute=0))
    scheduler.start()

async def main():
    application = ApplicationBuilder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("test_5days", test_5days))
    application.add_handler(CommandHandler("test_today", test_today))
    application.add_handler(CommandHandler("weekly_start", weekly_start))
    application.add_handler(CommandHandler("weekly_end", weekly_end))

    await scheduled_tasks(application)
    await application.run_polling()

if __name__ == "__main__":
    asyncio.run(main())