import csv
import logging
from datetime import datetime, timedelta
import asyncio
import pytz

from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
)
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.daily import DailyTrigger

TOKEN = "YOUR_BOT_TOKEN"
CSV_FILE = "projects.csv"
TIMEZONE = pytz.timezone("Europe/Moscow")
TELEGRAM_ADMIN = "ellobodefuego"

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)

def load_projects():
    try:
        with open(CSV_FILE, newline='', encoding='utf-8') as f:
            reader = csv.DictReader(f)
            return [
                {
                    "project": row["project"],
                    "username": row["username"],
                    "date": int(row["date"])
                }
                for row in reader
                if row["project"] and row["username"] and row["date"].isdigit()
            ]
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è CSV: {e}")
        return []

def get_projects_by_day(target_day: int) -> list:
    today = datetime.now(TIMEZONE)
    return [
        p for p in load_projects()
        if p["date"] == target_day
    ]

def get_projects_by_day_diff(diff_days: int) -> list:
    today = datetime.now(TIMEZONE)
    target_day = (today + timedelta(days=diff_days)).day
    return get_projects_by_day(target_day)

def format_projects(projects: list) -> str:
    if not projects:
        return "–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤."
    return "\n".join([f"‚Ä¢ {p['project']} ‚Äî @{p['username']}" for p in projects])

async def notify_projects(context: ContextTypes.DEFAULT_TYPE, diff_days: int):
    projects = get_projects_by_day_diff(diff_days)
    if projects:
        message = (
            f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –æ—Ç—á—ë—Ç–∞—Ö –∑–∞ {diff_days} –¥–Ω–µ–π:\n\n"
            f"{format_projects(projects)}"
        )
        await context.bot.send_message(chat_id=context.job.chat_id, text=message)

async def notify_today(context: ContextTypes.DEFAULT_TYPE):
    today = datetime.now(TIMEZONE).day
    projects = get_projects_by_day(today)
    if projects:
        message = (
            f"üì§ –°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å –æ—Ç—á—ë—Ç–∞ –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º:\n\n"
            f"{format_projects(projects)}"
        )
        await context.bot.send_message(chat_id=context.job.chat_id, text=message)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî ClientOpsBot.\n\n"
        "–Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä–∞–º –æ–± –æ—Ç—á–µ—Ç–∞—Ö –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º:\n"
        "‚Ä¢ –ó–∞ 5 –¥–Ω–µ–π –¥–æ –¥–∞—Ç—ã —Å–¥–∞—á–∏\n"
        "‚Ä¢ –í –¥–µ–Ω—å —Å–¥–∞—á–∏ –æ—Ç—á–µ—Ç–∞\n\n"
        "–ß—Ç–æ–±—ã –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
        "/test_5days ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 5 –¥–Ω–µ–π\n"
        "/test_today ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –¥–µ–Ω—å –æ—Ç—á–µ—Ç–∞\n\n"
        "–ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –û–∂–∏–¥–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –≥—Ä–∞—Ñ–∏–∫–æ–º."
    )
    await update.message.reply_text(text)

async def test_5days(update: Update, context: ContextTypes.DEFAULT_TYPE):
    projects = get_projects_by_day_diff(5)
    await update.message.reply_text(
        f"‚úÖ –¢–µ—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 5 –¥–Ω–µ–π –≤—ã–ø–æ–ª–Ω–µ–Ω.\n\n{format_projects(projects)}"
    )

async def test_today(update: Update, context: ContextTypes.DEFAULT_TYPE):
    today = datetime.now(TIMEZONE).day
    projects = get_projects_by_day(today)
    await update.message.reply_text(
        f"‚úÖ –¢–µ—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –≤—ã–ø–æ–ª–Ω–µ–Ω.\n\n{format_projects(projects)}"
    )

async def report_1(update: Update, context: ContextTypes.DEFAULT_TYPE):
    today = datetime.now(TIMEZONE)
    end_date = today + timedelta(days=6 - today.weekday())  # –¥–æ –∫–æ–Ω—Ü–∞ –Ω–µ–¥–µ–ª–∏
    projects = load_projects()
    result = [
        p for p in projects
        if today.day <= p["date"] <= end_date.day
    ]
    await update.message.reply_text(
        f"üìÖ –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –æ—Ç—á—ë—Ç—ã –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ:\n{format_projects(result)}\n\n"
        "üí∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–æ–º–Ω–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞–º –æ–± –æ–ø–ª–∞—Ç–µ."
    )

async def report_5(update: Update, context: ContextTypes.DEFAULT_TYPE):
    today = datetime.now(TIMEZONE)
    start_date = today - timedelta(days=today.weekday())  # –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
    projects = load_projects()
    result = [
        p for p in projects
        if start_date.day <= p["date"] <= today.day
    ]
    await update.message.reply_text(
        f"üìä –ò—Ç–æ–≥ –ø–æ –æ—Ç—á—ë—Ç–∞–º –∑–∞ –Ω–µ–¥–µ–ª—é:\n{format_projects(result)}\n\n"
        f"@ellobodefuego, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –æ—Ç—á—ë—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∫–ª–∏–µ–Ω—Ç–∞–º."
    )

async def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("test_5days", test_5days))
    app.add_handler(CommandHandler("test_today", test_today))
    app.add_handler(CommandHandler("report_1", report_1))
    app.add_handler(CommandHandler("report_5", report_5))

    scheduler = AsyncIOScheduler(timezone=TIMEZONE)
    scheduler.add_job(
        notify_projects,
        trigger=DailyTrigger(hour=9, minute=0),
        kwargs={"context": app.bot, "diff_days": 5},
        name="notify_5days"
    )
    scheduler.add_job(
        notify_today,
        trigger=DailyTrigger(hour=9, minute=0),
        kwargs={"context": app.bot},
        name="notify_today"
    )
    scheduler.start()

    logging.info("‚úÖ ClientOpsBot –∑–∞–ø—É—â–µ–Ω.")
    await app.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
