import logging
import datetime
import asyncio
import nest_asyncio

from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
)
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# ID —á–∞—Ç–∞, –∫—É–¥–∞ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
CHAT_ID = "YOUR_CHAT_ID"  # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –≤–∞—à–µ–≥–æ —á–∞—Ç–∞
TOKEN = "8095206946:AAFlOJi0BoRr9Z-MJMigWkk6arT9Ck-uhRk"  # –≤—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞

# –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö (—ç–º—É–ª—è—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã)
projects = [
    {"–Ω–∞–∑–≤–∞–Ω–∏–µ": "–ü—Ä–æ–µ–∫—Ç –ê", "–¥–∞—Ç–∞_–æ—Ç—á–µ—Ç–∞": 5, "–Ω–∏–∫": "@user1"},
    {"–Ω–∞–∑–≤–∞–Ω–∏–µ": "–ü—Ä–æ–µ–∫—Ç B", "–¥–∞—Ç–∞_–æ—Ç—á–µ—Ç–∞": 10, "–Ω–∏–∫": "@user2"},
    {"–Ω–∞–∑–≤–∞–Ω–∏–µ": "–ü—Ä–æ–µ–∫—Ç C", "–¥–∞—Ç–∞_–æ—Ç—á–µ—Ç–∞": 15, "–Ω–∏–∫": "@user3"},
    {"–Ω–∞–∑–≤–∞–Ω–∏–µ": "–ü—Ä–æ–µ–∫—Ç D", "–¥–∞—Ç–∞_–æ—Ç—á–µ—Ç–∞": 25, "–Ω–∏–∫": "@user4"},
]

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ 5 –¥–Ω–µ–π –¥–æ –¥–∞—Ç—ã –æ—Ç—á–µ—Ç–∞
async def notify_5days():
    today = datetime.datetime.today().day
    upcoming = [p for p in projects if (p["–¥–∞—Ç–∞_–æ—Ç—á–µ—Ç–∞"] - today) == 5]
    if upcoming:
        msg = "üì¢ –ß–µ—Ä–µ–∑ 5 –¥–Ω–µ–π –æ—Ç—á–µ—Ç –ø–æ:\n"
        for p in upcoming:
            msg += f"- {p['–Ω–∞–∑–≤–∞–Ω–∏–µ']} ({p['–Ω–∏–∫']})\n"
        await app.bot.send_message(chat_id=CHAT_ID, text=msg)

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –¥–µ–Ω—å –æ—Ç—á–µ—Ç–∞
async def notify_today():
    today = datetime.datetime.today().day
    current = [p for p in projects if p["–¥–∞—Ç–∞_–æ—Ç—á–µ—Ç–∞"] == today]
    if current:
        msg = "üìÖ –°–µ–≥–æ–¥–Ω—è –Ω—É–∂–Ω–æ —Å–¥–∞—Ç—å –æ—Ç—á–µ—Ç:\n"
        for p in current:
            msg += f"- {p['–Ω–∞–∑–≤–∞–Ω–∏–µ']} ({p['–Ω–∏–∫']})\n"
        await app.bot.send_message(chat_id=CHAT_ID, text=msg)

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
async def weekly_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üîî –ù–µ–¥–µ–ª—è –Ω–∞—á–∞–ª–∞—Å—å. –ü–æ–≥–Ω–∞–ª–∏!")

async def weekly_end(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚úÖ –ù–µ–¥–µ–ª—è –∑–∞–∫—Ä—ã—Ç–∞. –ñ–¥—É –æ—Ç—á–µ—Ç–æ–≤.")

# –ì–ª–∞–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    global app
    app = ApplicationBuilder().token(TOKEN).build()

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("weekly_start", weekly_start))
    app.add_handler(CommandHandler("weekly_end", weekly_end))

    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler = AsyncIOScheduler()
    scheduler.add_job(notify_5days, "cron", hour=9)
    scheduler.add_job(notify_today, "cron", hour=9)
    scheduler.add_job(lambda: asyncio.create_task(weekly_start_msg()), "cron", day_of_week="mon", hour=9)
    scheduler.add_job(lambda: asyncio.create_task(weekly_end_msg()), "cron", day_of_week="fri", hour=18)
    scheduler.start()

    logger.info("–ó–∞–ø—É—Å–∫ ClientOpsBot...")
    await app.initialize()
    await app.start()
    await app.updater.start_polling()
    await app.updater.idle()

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
async def weekly_start_msg():
    await app.bot.send_message(chat_id=CHAT_ID, text="üîî *–ù–∞—á–∞–ª–æ –Ω–µ–¥–µ–ª–∏!* –ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ –∑–∞–¥–∞—á–∞—Ö.", parse_mode="Markdown")

async def weekly_end_msg():
    await app.bot.send_message(chat_id=CHAT_ID, text="‚úÖ *–ö–æ–Ω–µ—Ü –Ω–µ–¥–µ–ª–∏!* –û—Ç—á–µ—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.", parse_mode="Markdown")

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    nest_asyncio.apply()
    asyncio.get_event_loop().run_until_complete(main())
