import asyncio
import datetime
import logging
import csv
from pytz import timezone

from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler,
    ContextTypes
)

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
BOT_TOKEN = "8095206946:AAFlOJi0BoRr9Z-MJMigWkk6arT9Ck-uhRk"
TIMEZONE = timezone("Europe/Moscow")
PROJECTS_CSV = "projects.csv"

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(
    format='%(asctime)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# === –ó–∞–≥—Ä—É–∑–∫–∞ CSV ===
def load_projects():
    projects = []
    try:
        with open(PROJECTS_CSV, newline='', encoding='utf-8') as f:
            reader = csv.DictReader(f)
            for row in reader:
                date = datetime.datetime.strptime(row['date'], "%Y-%m-%d").date()
                projects.append({
                    "name": row['name'],
                    "responsible": row['responsible'],
                    "date": date
                })
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è CSV: {e}")
    return projects

# === –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ===
async def notify(context: ContextTypes.DEFAULT_TYPE, days_before: int):
    today = datetime.datetime.now(TIMEZONE).date()
    projects = [p for p in load_projects() if (p['date'] - today).days == days_before]
    for p in projects:
        text = f"‚ö†Ô∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –æ—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–µ–∫—Ç—É {p['name']}\n–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {p['responsible']}"
        await context.bot.send_message(chat_id=context.bot_data["chat_id"], text=text)

# === –ö–æ–º–∞–Ω–¥—ã ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.bot_data["chat_id"] = update.effective_chat.id
    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî ClientOpsBot.\n\n"
        "–Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä–∞–º –æ–± –æ—Ç—á–µ—Ç–∞—Ö –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º:\n"
        "‚Ä¢ –ó–∞ 5 –¥–Ω–µ–π –¥–æ –¥–∞—Ç—ã —Å–¥–∞—á–∏\n"
        "‚Ä¢ –í –¥–µ–Ω—å —Å–¥–∞—á–∏ –æ—Ç—á–µ—Ç–∞\n\n"
        "–ß—Ç–æ–±—ã –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
        "/test_5days ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 5 –¥–Ω–µ–π\n"
        "/test_today ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –¥–µ–Ω—å –æ—Ç—á–µ—Ç–∞\n\n"
        "–ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –û–∂–∏–¥–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –≥—Ä–∞—Ñ–∏–∫–æ–º."
    )
    await update.message.reply_text(text)

async def test_5days(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await notify(context=context, days_before=5)

async def test_today(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await notify(context=context, days_before=0)

async def report_1(update: Update, context: ContextTypes.DEFAULT_TYPE):
    today = datetime.datetime.now(TIMEZONE).date()
    end = today + datetime.timedelta(days=7)
    projects = [p for p in load_projects() if today <= p['date'] <= end]
    if projects:
        text = "üìå –û—Ç—á–µ—Ç—ã –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ:\n" + "\n".join(
            [f"‚Ä¢ {p['name']} ‚Äî {p['responsible']} (–¥–æ {p['date'].strftime('%d.%m')})" for p in projects])
        text += "\n\nüü° –ù–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–∞–ø–æ–º–Ω–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞–º –æ–± –æ–ø–ª–∞—Ç–µ."
    else:
        text = "‚úÖ –ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –æ—Ç—á–µ—Ç–æ–≤ –Ω–µ—Ç."
    await update.message.reply_text(text)

async def report_5(update: Update, context: ContextTypes.DEFAULT_TYPE):
    today = datetime.datetime.now(TIMEZONE).date()
    start = today - datetime.timedelta(days=6)
    projects = [p for p in load_projects() if start <= p['date'] <= today]
    if projects:
        text = "üì§ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –æ—Ç—á–µ—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ —ç—Ç–∏–º –ø—Ä–æ–µ–∫—Ç–∞–º:\n" + "\n".join(
            [f"‚Ä¢ {p['name']} ‚Äî {p['responsible']} (–¥–æ {p['date'].strftime('%d.%m')})" for p in projects])
    else:
        text = "‚úÖ –ó–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é –æ—Ç—á–µ—Ç–æ–≤ –Ω–µ –±—ã–ª–æ."
    await update.message.reply_text(text)

# === –ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ===
def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("test_5days", test_5days))
    app.add_handler(CommandHandler("test_today", test_today))
    app.add_handler(CommandHandler("report_1", report_1))
    app.add_handler(CommandHandler("report_5", report_5))

    scheduler = AsyncIOScheduler(timezone=TIMEZONE)
    scheduler.add_job(notify, CronTrigger(day_of_week='mon', hour=9), kwargs={"context": app, "days_before": 5})
    scheduler.add_job(notify, CronTrigger(day_of_week='fri', hour=9), kwargs={"context": app, "days_before": 0})
    scheduler.start()

    logger.info("‚úÖ ClientOpsBot –∑–∞–ø—É—â–µ–Ω.")
    app.run_polling()

if __name__ == "__main__":
    main()
