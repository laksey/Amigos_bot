
import csv
import datetime
import asyncio
from telegram import Bot
from telegram.ext import ApplicationBuilder, CommandHandler

TOKEN = "YOUR_BOT_TOKEN"  # –ü–æ–¥—Å—Ç–∞–≤—å —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
CHAT_USERNAME = "@ellobodefuego"
CSV_PATH = "projects.csv"

def read_projects():
    projects = []
    with open(CSV_PATH, newline='', encoding='utf-8') as csvfile:
        reader = csv.DictReader(csvfile)
        for row in reader:
            projects.append(row)
    return projects

def get_upcoming_reports(projects):
    today = datetime.date.today()
    week_end = today + datetime.timedelta(days=(6 - today.weekday()))
    return [p for p in projects if get_date(p['–î–∞—Ç–∞ —Å–¥–∞—á–∏']) and today <= get_date(p['–î–∞—Ç–∞ —Å–¥–∞—á–∏']) <= week_end]

def get_last_week_reports(projects):
    today = datetime.date.today()
    week_start = today - datetime.timedelta(days=today.weekday() + 7)
    week_end = week_start + datetime.timedelta(days=6)
    return [p for p in projects if get_date(p['–î–∞—Ç–∞ —Å–¥–∞—á–∏']) and week_start <= get_date(p['–î–∞—Ç–∞ —Å–¥–∞—á–∏']) <= week_end]

def get_date(date_str):
    try:
        return datetime.datetime.strptime(date_str, "%d.%m.%Y").date()
    except:
        return None

async def send_start_of_week(context):
    projects = read_projects()
    upcoming = get_upcoming_reports(projects)
    past = get_last_week_reports(projects)

    msg = "üìù –ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –Ω—É–∂–Ω–æ —Å–¥–∞—Ç—å –æ—Ç—á–µ—Ç—ã:
"
    for p in upcoming:
        msg += f"- {p['–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞']} (–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π {p['–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π']}, –¥–æ {p['–î–∞—Ç–∞ —Å–¥–∞—á–∏']})
"

    msg += "
üí∞ –ù–∞–ø–æ–º–Ω–∏ –∫–ª–∏–µ–Ω—Ç—É –æ–± –æ–ø–ª–∞—Ç–µ –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º:
"
    for p in past:
        msg += f"- {p['–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞']} (–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π {p['–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π']})
"

    await context.bot.send_message(chat_id=context.job.chat_id, text=msg)

async def send_end_of_week(context):
    projects = read_projects()
    msg = f"üìÖ –ó–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è –Ω–µ–¥–µ–ª—è. {CHAT_USERNAME}, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á—Ç–æ –æ—Ç—á–µ—Ç—ã —Å–¥–∞–Ω—ã:
"
    for p in get_upcoming_reports(projects):
        msg += f"- {p['–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞']} (–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π {p['–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π']})
"

    await context.bot.send_message(chat_id=context.job.chat_id, text=msg)

async def start(update, context):
    await update.message.reply_text("–ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –û—Ç—á–µ—Ç—ã –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.")

async def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    await app.start()
    await app.updater.start_polling()
    await app.updater.idle()

if __name__ == "__main__":
    asyncio.run(main())
