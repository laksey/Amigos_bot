import asyncio
import datetime
import logging
import nest_asyncio


from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

TOKEN = "8095206946:AAFlOJi0BoRr9Z-MJMigWkk6arT9Ck-uhRk"
CHAT_ID = "-1002152973925"

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def weekly_start(bot):
    await bot.send_message(chat_id=CHAT_ID, text="üü¢ –ù–∞—á–∞–ª–æ –Ω–µ–¥–µ–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–¥–∞—á–∏ –∏ —Å—Ç–∞—Ç—É—Å—ã –ø—Ä–æ–µ–∫—Ç–æ–≤.")

async def weekly_end(bot):
    await bot.send_message(chat_id=CHAT_ID, text="üî¥ –ö–æ–Ω–µ—Ü –Ω–µ–¥–µ–ª–∏. –ü–æ–¥–≤–µ–¥–∏—Ç–µ –∏—Ç–æ–≥–∏ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç—á–µ—Ç—ã.")

async def notify_today(bot):
    await bot.send_message(chat_id=CHAT_ID, text="üìå –°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Å–¥–∞—á–∏ –æ—Ç—á–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–º–µ—Ç—å—Ç–µ—Å—å.")

async def notify_5days(bot):
    await bot.send_message(chat_id=CHAT_ID, text="‚è≥ –î–æ —Å–¥–∞—á–∏ –æ—Ç—á–µ—Ç–∞ –æ—Å—Ç–∞–ª–æ—Å—å 5 –¥–Ω–µ–π. –ì–æ—Ç–æ–≤—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.")

async def scheduler_loop(app: Application):
    sent_flags = set()
    while True:
        now = datetime.datetime.now()
        key = (now.weekday(), now.hour, now.minute)

        if key not in sent_flags:
            if now.weekday() == 0 and now.hour == 9 and now.minute == 0:
                await weekly_start(app.bot)
                sent_flags.add(key)

            elif now.weekday() == 4 and now.hour == 18 and now.minute == 0:
                await weekly_end(app.bot)
                sent_flags.add(key)

            elif now.day == 10 and now.hour == 12 and now.minute == 0:
                await notify_today(app.bot)
                sent_flags.add(key)

            elif now.day == 5 and now.hour == 12 and now.minute == 0:
                await notify_5days(app.bot)
                sent_flags.add(key)

        await asyncio.sleep(30)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã ClientOpsBot –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –û–∂–∏–¥–∞–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")

async def main():
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    asyncio.create_task(scheduler_loop(app))
    logger.info("üöÄ ClientOpsBot –∑–∞–ø—É—â–µ–Ω")
    await app.run_polling()

if __name__ == '__main__':
    nest_asyncio.apply()
    asyncio.run(main())

