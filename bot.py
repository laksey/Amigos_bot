
import csv
import logging
import asyncio
import datetime
from telegram import Bot, Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

TOKEN = "8095206946:AAFlOJi0BoRr9Z-MJMigWkk6arT9Ck-uhRk"
CSV_FILE = "projects.csv"
ADMIN_USERNAME = "@ellobodefuego"

logging.basicConfig(level=logging.INFO)
bot = Bot(token=TOKEN)

async def send_message(text: str):
    await bot.send_message(chat_id=chat_id, text=text, parse_mode="Markdown")

def read_projects():
    with open(CSV_FILE, newline='', encoding="utf-8") as f:
        reader = csv.DictReader(f)
        return list(reader)

def get_due_projects(offset_days=0):
    today = datetime.date.today() + datetime.timedelta(days=offset_days)
    return [p for p in read_projects() if parse_date(p["–î–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞"]) == today]

def parse_date(date_str):
    try:
        return datetime.datetime.strptime(date_str.strip(), "%d.%m.%Y").date()
    except Exception:
        return None

async def weekly_start_handler(update: Update = None, context: ContextTypes.DEFAULT_TYPE = None):
    projects = read_projects()
    msg = "üìù –ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –Ω—É–∂–Ω–æ —Å–¥–∞—Ç—å –æ—Ç—á–µ—Ç—ã:
"
    for p in projects:
        report_date = parse_date(p["–î–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞"])
        if report_date and report_date.isocalendar()[1] == datetime.date.today().isocalendar()[1]:
            msg += f"‚Ä¢ {p['–ü—Ä–æ–µ–∫—Ç']} ‚Äî @{p['–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π']}
"
    await send_message(msg)

async def weekly_end_handler(update: Update = None, context: ContextTypes.DEFAULT_TYPE = None):
    projects = read_projects()
    msg = f"‚úÖ {ADMIN_USERNAME}, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –æ—Ç—á–µ—Ç—ã —Å–¥–∞–Ω—ã:
"
    for p in projects:
        report_date = parse_date(p["–î–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞"])
        if report_date and report_date.isocalendar()[1] == (datetime.date.today().isocalendar()[1] - 1):
            msg += f"‚Ä¢ {p['–ü—Ä–æ–µ–∫—Ç']} ‚Äî @{p['–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π']}
"
    await send_message(msg)

async def daily_check():
    projects = get_due_projects()
    if projects:
        msg = "üì¢ –°–µ–≥–æ–¥–Ω—è –Ω—É–∂–Ω–æ —Å–¥–∞—Ç—å –æ—Ç—á–µ—Ç—ã:
"
        for p in projects:
            msg += f"‚Ä¢ {p['–ü—Ä–æ–µ–∫—Ç']} ‚Äî @{p['–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π']}
"
        await send_message(msg)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî ClientOpsBot.

"
        "–Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä–∞–º –æ–± –æ—Ç—á–µ—Ç–∞—Ö –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º:
"
        "‚Ä¢ –ó–∞ 5 –¥–Ω–µ–π –¥–æ –¥–∞—Ç—ã —Å–¥–∞—á–∏
"
        "‚Ä¢ –í –¥–µ–Ω—å —Å–¥–∞—á–∏ –æ—Ç—á–µ—Ç–∞

"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
"
        "/weekly_start ‚Äî —Å–ø–∏—Å–æ–∫ –æ—Ç—á–µ—Ç–æ–≤ –Ω–∞ –Ω–µ–¥–µ–ª—é
"
        "/weekly_end ‚Äî –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–æ–≤
"
        "/test_5days ‚Äî —Ç–µ—Å—Ç 5-–¥–Ω–µ–≤–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
"
        "/test_today ‚Äî —Ç–µ—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –¥–µ–Ω—å —Å–¥–∞—á–∏"
    )

async def test_5days(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üîî –¢–µ—Å—Ç: –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 5 –¥–Ω–µ–π –¥–æ –æ—Ç—á–µ—Ç–∞.")

async def test_today(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üì¢ –¢–µ—Å—Ç: –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –¥–µ–Ω—å —Å–¥–∞—á–∏ –æ—Ç—á–µ—Ç–∞.")

async def main():
    global chat_id
    application = ApplicationBuilder().token(TOKEN).build()
    updates = await application.bot.get_updates()
    if updates:
        chat_id = updates[-1].message.chat_id
    else:
        chat_id = (await application.bot.get_me()).id

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("test_5days", test_5days))
    application.add_handler(CommandHandler("test_today", test_today))
    application.add_handler(CommandHandler("weekly_start", weekly_start_handler))
    application.add_handler(CommandHandler("weekly_end", weekly_end_handler))

    scheduler = AsyncIOScheduler()
    scheduler.add_job(lambda: asyncio.create_task(weekly_start_handler()), CronTrigger(day_of_week="mon", hour=9, minute=0))
    scheduler.add_job(lambda: asyncio.create_task(weekly_end_handler()), CronTrigger(day_of_week="fri", hour=18, minute=0))
    scheduler.add_job(lambda: asyncio.create_task(daily_check()), CronTrigger(hour=9, minute=0))
    scheduler.start()

    await application.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
