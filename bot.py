import csv
import datetime
import os
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)
from apscheduler.schedulers.asyncio import AsyncIOScheduler

TOKEN = "8095206946:AAFlOJi0BoRr9Z-MJMigWkk6arT9Ck-uhRk"
CSV_FILE = "projects.csv"
ADMIN_NICK = "@ellobodefuego"
CHAT_ID_FILE = "chat_id.txt"

# –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
def read_projects():
    projects = []
    if not os.path.exists(CSV_FILE):
        return projects
    with open(CSV_FILE, newline='', encoding='utf-8') as f:
        reader = csv.DictReader(f)
        for row in reader:
            name = row.get("–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞")
            owner = row.get("–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π (–Ω–∏–∫ –≤ –¢–ì)")
            due_day = row.get("–î–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞")
            if name and owner and due_day:
                try:
                    projects.append((name.strip(), owner.strip(), int(due_day)))
                except ValueError:
                    continue
    return projects

# –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ —á–∏—Å–ª—É
def get_projects_by_day(day):
    return [(name, owner) for (name, owner, due_day) in read_projects() if due_day == day]

# –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∑–∞ –ø—Ä–æ—à–µ–¥—à—É—é –Ω–µ–¥–µ–ª—é (–¥–ª—è –æ–ø–ª–∞—Ç—ã)
def get_projects_last_week(today):
    last_week = []
    for name, owner, due_day in read_projects():
        delta = (today.day - due_day) % 31
        if 1 <= delta <= 7:
            last_week.append((name, owner))
    return last_week

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    with open(CHAT_ID_FILE, "w") as f:
        f.write(str(update.effective_chat.id))
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî ClientOpsBot.\n\n"
        "–Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä–∞–º –æ–± –æ—Ç—á–µ—Ç–∞—Ö –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º:\n"
        "‚Ä¢ –ó–∞ 5 –¥–Ω–µ–π –¥–æ –¥–∞—Ç—ã —Å–¥–∞—á–∏\n"
        "‚Ä¢ –í –¥–µ–Ω—å —Å–¥–∞—á–∏ –æ—Ç—á–µ—Ç–∞\n\n"
        "–ß—Ç–æ–±—ã –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
        "/test_5days ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 5 –¥–Ω–µ–π\n"
        "/test_today ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –¥–µ–Ω—å –æ—Ç—á–µ—Ç–∞\n"
        "/weekly_start ‚Äî –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏—á–Ω—ã–π –æ—Ç—á–µ—Ç\n"
        "/weekly_end ‚Äî –ø—è—Ç–Ω–∏—á–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤"
    )

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –¥–µ–Ω—å –æ—Ç—á–µ—Ç–∞
async def notify_today(context: ContextTypes.DEFAULT_TYPE):
    today = datetime.datetime.now().day
    chat_id = get_chat_id()
    projects = get_projects_by_day(today)
    for name, owner in projects:
        msg = f"üì¢ –°–µ–≥–æ–¥–Ω—è —Å–¥–∞—ë—Ç—Å—è –æ—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–µ–∫—Ç—É *{name}*. {owner}, –Ω–µ –∑–∞–±—É–¥—å!"
        await context.bot.send_message(chat_id=chat_id, text=msg, parse_mode="Markdown")

# –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 5 –¥–Ω–µ–π
async def notify_5days(context: ContextTypes.DEFAULT_TYPE):
    today = datetime.datetime.now()
    in_5_days = (today.day + 5 - 1) % 31 + 1
    chat_id = get_chat_id()
    projects = get_projects_by_day(in_5_days)
    for name, owner in projects:
        msg = f"‚è∞ –ß–µ—Ä–µ–∑ 5 –¥–Ω–µ–π –Ω—É–∂–Ω–æ —Å–¥–∞—Ç—å –æ—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–µ–∫—Ç—É *{name}*. {owner}, –ø–æ–¥–≥–æ—Ç–æ–≤—å—Å—è!"
        await context.bot.send_message(chat_id=chat_id, text=msg, parse_mode="Markdown")

# –ö–æ–º–∞–Ω–¥–∞ /test_today
async def test_today(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await notify_today(context)

# –ö–æ–º–∞–Ω–¥–∞ /test_5days
async def test_5days(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await notify_5days(context)

# /weekly_start ‚Äî –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ 9:00
async def weekly_start(context: ContextTypes.DEFAULT_TYPE):
    chat_id = get_chat_id()
    today = datetime.datetime.now()
    msg = "üìù *–ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –Ω—É–∂–Ω–æ —Å–¥–∞—Ç—å –æ—Ç—á–µ—Ç—ã:*\n\n"
    upcoming = []
    for name, owner, due_day in read_projects():
        if 0 <= (due_day - today.day) % 31 <= 6:
            upcoming.append(f"‚Ä¢ {name} ‚Äî {owner} (–¥–µ–Ω—å {due_day})")
    msg += "\n".join(upcoming) if upcoming else "–ù–µ—Ç –æ—Ç—á–µ—Ç–æ–≤ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ."
    # –û—Ç—á–µ—Ç—ã –Ω–∞ –ø—Ä–æ—à–ª–æ–π –Ω–µ–¥–µ–ª–µ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ
    msg += "\n\nüí∏ *–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ–ø–ª–∞—Ç—É –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º —Å–¥–∞–Ω–Ω—ã–º –Ω–∞ –ø—Ä–æ—à–ª–æ–π –Ω–µ–¥–µ–ª–µ:*\n\n"
    last_week = get_projects_last_week(today)
    msg += "\n".join([f"‚Ä¢ {name} ‚Äî {owner}" for name, owner in last_week]) if last_week else "–ù–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤."
    await context.bot.send_message(chat_id=chat_id, text=msg, parse_mode="Markdown")

# /weekly_end ‚Äî –ü—è—Ç–Ω–∏—Ü–∞ 18:00
async def weekly_end(context: ContextTypes.DEFAULT_TYPE):
    chat_id = get_chat_id()
    projects = get_projects_last_week(datetime.datetime.now())
    msg = f"üì§ –ó–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è –Ω–µ–¥–µ–ª—è. {ADMIN_NICK}, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á—Ç–æ –æ—Ç—á–µ—Ç—ã —Å–¥–∞–Ω—ã:\n\n"
    msg += "\n".join([f"‚Ä¢ {name} ‚Äî {owner}" for name, owner in projects]) if projects else "–ù–µ—Ç –æ—Ç—á–µ—Ç–æ–≤."
    await context.bot.send_message(chat_id=chat_id, text=msg)

# –ü–æ–ª—É—á–µ–Ω–∏–µ chat_id
def get_chat_id():
    if not os.path.exists(CHAT_ID_FILE):
        return None
    with open(CHAT_ID_FILE, "r") as f:
        return int(f.read().strip())

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    app = ApplicationBuilder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("test_today", test_today))
    app.add_handler(CommandHandler("test_5days", test_5days))
    app.add_handler(CommandHandler("weekly_start", weekly_start))
    app.add_handler(CommandHandler("weekly_end", weekly_end))

    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
    scheduler = AsyncIOScheduler()
    scheduler.add_job(notify_today, "cron", hour=9)
    scheduler.add_job(notify_5days, "cron", hour=10)
    scheduler.add_job(weekly_start, "cron", day_of_week="mon", hour=9)
    scheduler.add_job(weekly_end, "cron", day_of_week="fri", hour=18)
    scheduler.start()

    await app.initialize()
    await app.start()
    await app.updater.start_polling()
    await app.updater.idle()

# –ó–∞–ø—É—Å–∫ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π event loop
if __name__ == "__main__":
    import asyncio
    try:
        loop = asyncio.get_running_loop()
    except RuntimeError:
        loop = None

    if loop and loop.is_running():
        loop.create_task(main())
    else:
        asyncio.run(main())
