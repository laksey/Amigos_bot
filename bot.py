import nest_asyncio
nest_asyncio.apply()

import logging
import pandas as pd
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import asyncio
import pytz
import random

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = '8095206946:AAFlOJi0BoRr9Z-MJMigWkk6arT9Ck-uhRk'
CSV_FILE = 'projects.csv'
CHAT_ID_FILE = 'chat_id.txt'
TIMEZONE = 'Europe/Moscow'
tz = pytz.timezone(TIMEZONE)

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")


# –†–∞–±–æ—Ç–∞ —Å chat_id
def save_chat_id(chat_id: int):
    with open(CHAT_ID_FILE, 'w') as f:
        f.write(str(chat_id))

def load_chat_id() -> int | None:
    try:
        with open(CHAT_ID_FILE, 'r') as f:
            return int(f.read().strip())
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å chat_id: {e}")
        return None


# –ß—Ç–µ–Ω–∏–µ CSV
def load_projects():
    try:
        df = pd.read_csv(CSV_FILE)
        df['report_date'] = pd.to_datetime(df['report_date'], format='%d').apply(
            lambda d: datetime(datetime.now().year, datetime.now().month, d.day, tzinfo=tz).date()
        )
        return df
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è CSV: {e}")
        return pd.DataFrame(columns=['project', 'responsible', 'report_date'])


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
def generate_reminders(days_before: int) -> list[str]:
    today = datetime.now(tz).date()
    df = load_projects()

    messages = []

    for _, row in df.iterrows():
        report_date = row['report_date']

        if report_date < today:
            continue

        days_until = (report_date - today).days

        if days_before == 0 and days_until == 0:
            messages.append(f"‚Ä¢ {row['project']} ‚Äî —Å–µ–≥–æ–¥–Ω—è. –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {row['responsible']}")
        elif days_before > 0 and days_until == days_before:
            messages.append(f"‚Ä¢ {row['project']} ‚Äî {report_date.day} —á–∏—Å–ª–∞. –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {row['responsible']}")

    if not messages:
        return ["‚úÖ –°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –æ—Ç—á—ë—Ç–æ–≤."]
    return messages


# –ö–æ–º–∞–Ω–¥—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    save_chat_id(chat_id)

    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî ClientOpsBot.\n\n"
        "–Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä–∞–º –æ–± –æ—Ç—á–µ—Ç–∞—Ö –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º:\n"
        "‚Ä¢ –ó–∞ 5, 3, 1 –¥–µ–Ω—å –¥–æ –¥–∞—Ç—ã —Å–¥–∞—á–∏\n"
        "‚Ä¢ –í –¥–µ–Ω—å —Å–¥–∞—á–∏ –æ—Ç—á–µ—Ç–∞\n\n"
        "–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
        "/test_5days ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ 5 –¥–Ω–µ–π\n"
        "/test_3days ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ 3 –¥–Ω—è\n"
        "/test_1day ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ 1 –¥–µ–Ω—å\n"
        "/test_today ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤ –¥–µ–Ω—å —Å–¥–∞—á–∏\n"
        "/report_1 ‚Äî –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –æ—Ç—á—ë—Ç—ã\n"
        "/report_5 ‚Äî –æ—Ç—á—ë—Ç—ã –ø—Ä–æ—à–ª–æ–π –Ω–µ–¥–µ–ª–∏\n"
        "/test_random ‚Äî —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–æ–µ–∫—Ç"
    )


async def test_reminder(update: Update, context: ContextTypes.DEFAULT_TYPE, days: int):
    msgs = generate_reminders(days)
    for msg in msgs:
        await update.message.reply_text(msg)

async def test_5days(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await test_reminder(update, context, 5)

async def test_3days(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await test_reminder(update, context, 3)

async def test_1day(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await test_reminder(update, context, 1)

async def test_today(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await test_reminder(update, context, 0)


async def report_1(update: Update, context: ContextTypes.DEFAULT_TYPE):
    today = datetime.now(tz)
    df = load_projects()
    week = today + timedelta(days=7)
    upcoming = df[df['report_date'] <= week.date()]

    if not upcoming.empty:
        message = "üìÖ –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –æ—Ç—á—ë—Ç—ã –Ω–∞ –Ω–µ–¥–µ–ª–µ:\n"
        for _, row in upcoming.iterrows():
            message += f"‚Ä¢ {row['project']} ‚Äî {row['report_date'].day} —á–∏—Å–ª–∞. –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {row['responsible']}\n"
    else:
        message = "–ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –Ω–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –æ—Ç—á–µ—Ç–æ–≤."

    await update.message.reply_text(message)


async def report_5(update: Update, context: ContextTypes.DEFAULT_TYPE):
    today = datetime.now(tz).date()
    df = load_projects()

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤, —É –∫–æ—Ç–æ—Ä—ã—Ö –¥–∞—Ç–∞ —Å–¥–∞—á–∏ –ø—Ä–æ—à–ª–∞ (–Ω–æ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ)
    filtered = df[(df['report_date'].month == today.month) & (df['report_date'] < today)]

    if filtered.empty:
        await update.message.reply_text("‚ùé –ü—Ä–æ–µ–∫—Ç–æ–≤ —Å –æ—Ç—á—ë—Ç–æ–º, —Å–¥–∞–Ω–Ω—ã–º –Ω–∞ –ø—Ä–æ—à–ª–æ–π –Ω–µ–¥–µ–ª–µ, –Ω–µ—Ç.")
        return

    message = "üóÇÔ∏è –û—Ç—á—ë—Ç—ã, —Å–¥–∞–Ω–Ω—ã–µ —Ä–∞–Ω–µ–µ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ:\n\n"
    for _, row in filtered.iterrows():
        message += f"‚Ä¢ {row['project']} ‚Äî {row['report_date'].day} —á–∏—Å–ª–∞. –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {row['responsible']}\n"

    await update.message.reply_text(message)


async def test_random(update: Update, context: ContextTypes.DEFAULT_TYPE):
    df = load_projects()
    if df.empty:
        await update.message.reply_text("üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
        return
    sample = df.sample(1).iloc[0]
    await update.message.reply_text(
        f"üé≤ –°–ª—É—á–∞–π–Ω—ã–π –ø—Ä–æ–µ–∫—Ç:\n‚Ä¢ {sample['project']} ‚Äî {sample['report_date'].day} —á–∏—Å–ª–∞. –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {sample['responsible']}"
    )


# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
async def send_scheduled_notifications(app, days_before):
    msgs = generate_reminders(days_before)
    chat_id = load_chat_id()
    if not chat_id:
        logging.warning("‚ùó chat_id –Ω–µ –Ω–∞–π–¥–µ–Ω, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")
        return

    for msg in msgs:
        await app.bot.send_message(chat_id=chat_id, text=msg)


# –ó–∞–ø—É—Å–∫
async def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("test_5days", test_5days))
    app.add_handler(CommandHandler("test_3days", test_3days))
    app.add_handler(CommandHandler("test_1day", test_1day))
    app.add_handler(CommandHandler("test_today", test_today))
    app.add_handler(CommandHandler("report_1", report_1))
    app.add_handler(CommandHandler("report_5", report_5))
    app.add_handler(CommandHandler("test_random", test_random))

    scheduler = AsyncIOScheduler(timezone=TIMEZONE)
    scheduler.add_job(lambda: asyncio.create_task(send_scheduled_notifications(app, 5)), 'cron', hour=9, minute=0)
    scheduler.add_job(lambda: asyncio.create_task(send_scheduled_notifications(app, 3)), 'cron', hour=9, minute=0)
    scheduler.add_job(lambda: asyncio.create_task(send_scheduled_notifications(app, 1)), 'cron', hour=9, minute=0)
    scheduler.add_job(lambda: asyncio.create_task(send_scheduled_notifications(app, 0)), 'cron', hour=9, minute=0)
    scheduler.start()

    logging.info("‚úÖ ClientOpsBot –∑–∞–ø—É—â–µ–Ω.")
    await app.run_polling()

# –ó–∞–ø—É—Å–∫
asyncio.run(main())
