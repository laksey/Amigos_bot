import logging
import csv
import datetime
import asyncio
import pytz
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
)
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
BOT_TOKEN = "8095206946:AAFlOJi0BoRr9Z-MJMigWkk6arT9Ck-uhRk"
TIMEZONE = pytz.timezone("Europe/Moscow")
CSV_PATH = "projects.csv"

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏–∑ CSV
def load_projects():
    projects = []
    try:
        with open(CSV_PATH, newline='', encoding='utf-8') as f:
            reader = csv.DictReader(f)
            for row in reader:
                try:
                    day = int(row['date'])
                    report_date = datetime.datetime.now(TIMEZONE).replace(day=1).replace(day=day).date()
                    projects.append({
                        "name": row['project'],
                        "responsible": row['responsible'],
                        "date": report_date,
                    })
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ –¥–∞—Ç—ã: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è CSV: {e}")
    return projects

# –ö–æ–º–∞–Ω–¥—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî ClientOpsBot.\n\n"
        "–Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä–∞–º –æ–± –æ—Ç—á–µ—Ç–∞—Ö –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º:\n"
        "‚Ä¢ –ó–∞ 5 –¥–Ω–µ–π –¥–æ –¥–∞—Ç—ã —Å–¥–∞—á–∏\n"
        "‚Ä¢ –í –¥–µ–Ω—å —Å–¥–∞—á–∏ –æ—Ç—á–µ—Ç–∞\n\n"
        "–ß—Ç–æ–±—ã –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
        "/test_5days ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 5 –¥–Ω–µ–π\n"
        "/test_today ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –¥–µ–Ω—å –æ—Ç—á–µ—Ç–∞\n"
        "/report_1 ‚Äî –æ—Ç—á–µ—Ç –æ –∑–∞–¥–∞—á–∞—Ö –Ω–∞ –Ω–µ–¥–µ–ª—é\n"
        "/report_5 ‚Äî —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º\n\n"
        "–ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –û–∂–∏–¥–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –≥—Ä–∞—Ñ–∏–∫–æ–º."
    )
    await update.message.reply_text(text)

async def test_5days(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await notify(context, days_before=5, test_chat_id=update.message.chat_id)

async def test_today(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await notify(context, days_before=0, test_chat_id=update.message.chat_id)

async def report_1(update: Update, context: ContextTypes.DEFAULT_TYPE):
    today = datetime.datetime.now(TIMEZONE).date()
    end_of_week = today + datetime.timedelta(days=(6 - today.weekday()))
    projects = [
        p for p in load_projects()
        if today <= p['date'] <= end_of_week
    ]
    if projects:
        text = "üìÖ –û—Ç—á–µ—Ç—ã –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ:\n" + "\n".join(
            [f"‚Ä¢ {p['name']} ‚Äî {p['responsible']} (–¥–æ {p['date'].strftime('%d.%m')})" for p in projects]
        ) + "\n\n‚ö†Ô∏è –ù–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–∞–ø–æ–º–Ω–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞–º –æ–± –æ–ø–ª–∞—Ç–µ!"
    else:
        text = "‚úÖ –ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ —Å–¥–∞—á–∞ –æ—Ç—á–µ—Ç–æ–≤ –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞."
    await update.message.reply_text(text)

async def report_5(update: Update, context: ContextTypes.DEFAULT_TYPE):
    today = datetime.datetime.now(TIMEZONE).date()
    start_of_week = today - datetime.timedelta(days=today.weekday())
    projects = [
        p for p in load_projects()
        if start_of_week <= p['date'] <= today
    ]
    if projects:
        text = "üì• –û—Ç—á–µ—Ç—ã –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ:\n" + "\n".join(
            [f"‚Ä¢ {p['name']} ‚Äî {p['responsible']} (–¥–æ {p['date'].strftime('%d.%m')})" for p in projects]
        ) + "\n\n@ellobodefuego, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏, —á—Ç–æ –≤—Å–µ –æ—Ç—á–µ—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã."
    else:
        text = "‚úÖ –ó–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é –æ—Ç—á–µ—Ç—ã –Ω–µ —Å–¥–∞–≤–∞–ª–∏—Å—å."
    await update.message.reply_text(text)

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
async def notify(context: ContextTypes.DEFAULT_TYPE, days_before=5, test_chat_id=None):
    today = datetime.datetime.now(TIMEZONE).date()
    target_date = today + datetime.timedelta(days=days_before)
    projects = [
        p for p in load_projects()
        if p['date'] == target_date
    ]
    if not projects:
        return
    for p in projects:
        msg = (
            f"‚ö†Ô∏è {'–°–µ–≥–æ–¥–Ω—è' if days_before == 0 else f'–ß–µ—Ä–µ–∑ {days_before} –¥–Ω–µ–π'} –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–µ–∫—Ç—É *{p['name']}*.\n"
            f"–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {p['responsible']}"
        )
        await context.bot.send_message(
            chat_id=test_chat_id or context.bot_data.get("group_chat_id", p['responsible']),
            text=msg,
            parse_mode='Markdown'
        )

# –ì–ª–∞–≤–Ω—ã–π –∑–∞–ø—É—Å–∫
async def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("test_5days", test_5days))
    app.add_handler(CommandHandler("test_today", test_today))
    app.add_handler(CommandHandler("report_1", report_1))
    app.add_handler(CommandHandler("report_5", report_5))

    scheduler = AsyncIOScheduler(timezone=TIMEZONE)
    scheduler.add_job(notify, CronTrigger(day_of_week='mon', hour=9), kwargs={"context": app, "days_before": 5})
    scheduler.add_job(notify, CronTrigger(day_of_week='fri', hour=9), kwargs={"context": app, "days_before": 0})
    scheduler.start()

    logger.info("‚úÖ ClientOpsBot –∑–∞–ø—É—â–µ–Ω.")
    await app.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
