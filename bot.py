import csv
import datetime
import logging
import asyncio
from telegram import Update
from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler, CallbackContext

TOKEN = '8095206946:AAFlOJi0BoRr9Z-MJMigWkk6arT9Ck-uhRk'
CSV_FILE = 'projects.csv'
MENTION = '@ellobodefuego'

logging.basicConfig(level=logging.INFO)

def read_projects():
    with open(CSV_FILE, newline='', encoding='utf-8') as csvfile:
        reader = csv.DictReader(csvfile)
        return list(reader)

def is_due_today(project_day: int):
    today = datetime.date.today()
    try:
        return today.day == project_day
    except:
        return False

def is_due_in_days(project_day: int, days_before: int):
    today = datetime.date.today()
    due_date = today + datetime.timedelta(days=days_before)
    try:
        return due_date.day == project_day
    except:
        return False

def format_projects(projects):
    return '\n'.join([f"‚Ä¢ {p['–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞']} ‚Äî {p['–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π (–Ω–∏–∫ –≤ TG)']}" for p in projects])

async def send_today_reports(context: CallbackContext):
    projects = read_projects()
    today = datetime.date.today()
    due_today = [p for p in projects if int(p['–î–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞']) == today.day]
    if due_today:
        msg = f"üìå –°–µ–≥–æ–¥–Ω—è —Å–¥–∞—ë–º –æ—Ç—á—ë—Ç—ã:\n{format_projects(due_today)}"
        await context.bot.send_message(chat_id=context.job.chat_id, text=msg)

async def send_5day_reminders(context: CallbackContext):
    projects = read_projects()
    future = datetime.date.today() + datetime.timedelta(days=5)
    reminder = [p for p in projects if int(p['–î–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞']) == future.day]
    if reminder:
        msg = f"‚è∞ –ß–µ—Ä–µ–∑ 5 –¥–Ω–µ–π —Å–¥–∞—ë–º –æ—Ç—á—ë—Ç—ã:\n{format_projects(reminder)}"
        await context.bot.send_message(chat_id=context.job.chat_id, text=msg)

async def weekly_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    projects = read_projects()
    today = datetime.date.today()
    msg = f"""üìù *–ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –Ω—É–∂–Ω–æ —Å–¥–∞—Ç—å –æ—Ç—á—ë—Ç—ã:*\n"""
    for p in projects:
        report_day = int(p['–î–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞'])
        if today.day <= report_day <= 31:
            msg += f"‚Ä¢ {p['–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞']} ‚Äî {p['–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π (–Ω–∏–∫ –≤ TG)']} (–¥–µ–Ω—å: {report_day})\n"
    await update.message.reply_text(msg, parse_mode='Markdown')

async def weekly_end(update: Update, context: ContextTypes.DEFAULT_TYPE):
    projects = read_projects()
    msg = f"‚úÖ –ù–µ–¥–µ–ª—è –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è. {MENTION}, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á—Ç–æ –±—ã–ª–∏ —Å–¥–∞–Ω—ã –æ—Ç—á—ë—Ç—ã –ø–æ:\n"
    msg += format_projects(projects)
    await update.message.reply_text(msg)

async def test_5days(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_5day_reminders(context)

async def test_today(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_today_reports(context)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("""
üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî ClientOpsBot.

–Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä–∞–º –æ–± –æ—Ç—á–µ—Ç–∞—Ö –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º:
‚Ä¢ –ó–∞ 5 –¥–Ω–µ–π –¥–æ –¥–∞—Ç—ã —Å–¥–∞—á–∏
‚Ä¢ –í –¥–µ–Ω—å —Å–¥–∞—á–∏ –æ—Ç—á–µ—Ç–∞

–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:
/test_5days ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 5 –¥–Ω–µ–π
/test_today ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –¥–µ–Ω—å —Å–¥–∞—á–∏
/weekly_start ‚Äî –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
/weekly_end ‚Äî —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
""")

async def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("test_5days", test_5days))
    app.add_handler(CommandHandler("test_today", test_today))
    app.add_handler(CommandHandler("weekly_start", weekly_start))
    app.add_handler(CommandHandler("weekly_end", weekly_end))

    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏
    app.job_queue.run_daily(send_5day_reminders, time=datetime.time(9, 0))
    app.job_queue.run_daily(send_today_reports, time=datetime.time(9, 0))
    app.job_queue.run_daily(weekly_start, time=datetime.time(9, 0), days=(0,))
    app.job_queue.run_daily(weekly_end, time=datetime.time(18, 0), days=(4,))

    await app.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
