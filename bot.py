import logging
import datetime
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, JobQueue
import csv

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TOKEN = '8095206946:AAFlOJi0BoRr9Z-MJMigWkk6arT9Ck-uhRk'
CHAT_ID = 'YOUR_CHAT_ID'  # —É–∫–∞–∂–∏ ID —á–∞—Ç–∞ –∏–ª–∏ —Å–¥–µ–ª–∞–π –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ

CSV_FILE = 'projects.csv'

# === –õ–û–ì–ò ===
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# === –ß–¢–ï–ù–ò–ï CSV ===
def read_projects():
    projects = []
    with open(CSV_FILE, newline='', encoding='utf-8') as f:
        reader = csv.DictReader(f)
        for row in reader:
            if row.get('–î–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞') and row.get('–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π'):
                projects.append({
                    'name': row['–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞'],
                    'report_day': int(row['–î–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞']),
                    'owner': row['–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π']
                })
    return projects

# === –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï –ó–ê 5 –î–ù–ï–ô ===
async def notify_5days(context: ContextTypes.DEFAULT_TYPE):
    today = datetime.datetime.now()
    day = today.day
    month_days = (today.replace(month=today.month % 12 + 1, day=1) - datetime.timedelta(days=1)).day
    target_day = (day + 5) if day + 5 <= month_days else (day + 5 - month_days)
    projects = read_projects()

    msg = "‚è≥ *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 5 –¥–Ω–µ–π –¥–æ –æ—Ç—á–µ—Ç–∞:*\n"
    found = False
    for p in projects:
        if p['report_day'] == target_day:
            msg += f"‚Äî {p['name']} (–æ—Ç–≤. @{p['owner']})\n"
            found = True

    if found:
        await context.bot.send_message(chat_id=CHAT_ID, text=msg, parse_mode="Markdown")

# === –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï –í –î–ï–ù–¨ –û–¢–ß–ï–¢–ê ===
async def notify_today(context: ContextTypes.DEFAULT_TYPE):
    today_day = datetime.datetime.now().day
    projects = read_projects()

    msg = "üì¢ *–°–µ–≥–æ–¥–Ω—è —Å–¥–∞—á–∞ –æ—Ç—á–µ—Ç–∞ –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º:*\n"
    found = False
    for p in projects:
        if p['report_day'] == today_day:
            msg += f"‚Äî {p['name']} (–æ—Ç–≤. @{p['owner']})\n"
            found = True

    if found:
        await context.bot.send_message(chat_id=CHAT_ID, text=msg, parse_mode="Markdown")

# === WEEKLY START ===
async def weekly_start(context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(chat_id=CHAT_ID, text="üîî *–ù–∞—á–∞–ª–æ –Ω–µ–¥–µ–ª–∏ ‚Äî –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–ª–∞–Ω –ø–æ –æ—Ç—á–µ—Ç–∞–º.*", parse_mode="Markdown")

# === WEEKLY END ===
async def weekly_end(context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(chat_id=CHAT_ID, text="‚úÖ *–ö–æ–Ω–µ—Ü –Ω–µ–¥–µ–ª–∏ ‚Äî —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –æ—Ç—á–µ—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.*", parse_mode="Markdown")

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = """üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî ClientOpsBot.
–Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä–∞–º –æ–± –æ—Ç—á–µ—Ç–∞—Ö –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º:
‚Ä¢ –ó–∞ 5 –¥–Ω–µ–π –¥–æ –¥–∞—Ç—ã —Å–¥–∞—á–∏
‚Ä¢ –í –¥–µ–Ω—å —Å–¥–∞—á–∏ –æ—Ç—á–µ—Ç–∞

–¢–µ—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/test_5days ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 5 –¥–Ω–µ–π
/test_today ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –¥–µ–Ω—å —Å–¥–∞—á–∏
"""
    await update.message.reply_text(msg)

async def test_5days(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await notify_5days(context)

async def test_today(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await notify_today(context)

async def test_weekly_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await weekly_start(context)

async def test_weekly_end(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await weekly_end(context)

# === –û–°–ù–û–í–ù–û–ô –ó–ê–ü–£–°–ö ===
async def main():
    app = ApplicationBuilder().token(TOKEN).build()

    # –∫–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("test_5days", test_5days))
    app.add_handler(CommandHandler("test_today", test_today))
    app.add_handler(CommandHandler("weekly_start", test_weekly_start))
    app.add_handler(CommandHandler("weekly_end", test_weekly_end))

    # –∑–∞–¥–∞—á–∏
    job_queue: JobQueue = app.job_queue
    job_queue.run_daily(notify_5days, time=datetime.time(9, 0))
    job_queue.run_daily(notify_today, time=datetime.time(9, 0))
    job_queue.run_daily(weekly_start, time=datetime.time(9, 0), days=(0,))  # –ü–ù
    job_queue.run_daily(weekly_end, time=datetime.time(18, 0), days=(4,))   # –ü–¢

    logger.info("–ó–∞–ø—É—Å–∫ ClientOpsBot...")
    await app.initialize()
    await app.start()
    await app.updater.start_polling()
    await app.updater.idle()

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
