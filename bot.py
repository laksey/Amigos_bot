import logging
import datetime
import asyncio

from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters
)

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = "8095206946:AAFlOJi0BoRr9Z-MJMigWkk6arT9Ck-uhRk"

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ (–º–æ–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–¥—Ç—è–≥–∏–≤–∞—Ç—å –∏–∑ —Ç–∞–±–ª–∏—Ü—ã)
projects = [
    {"name": "–ü—Ä–æ–µ–∫—Ç –ê", "owner": "@username1", "report_day": "2025-07-10"},
    {"name": "–ü—Ä–æ–µ–∫—Ç B", "owner": "@username2", "report_day": "2025-07-12"},
]

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("ClientOpsBot –∞–∫—Ç–∏–≤–µ–Ω. –Ø –Ω–∞–ø–æ–º–Ω—é –æ –¥–µ–¥–ª–∞–π–Ω–∞—Ö –∏ –æ—Ç—á—ë—Ç–∞—Ö.")

# –û—Ç–≤–µ—Ç –Ω–∞ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(f"–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: {update.message.text}")

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ 5 –¥–Ω–µ–π –¥–æ –æ—Ç—á–µ—Ç–∞
async def notify_5days(context: ContextTypes.DEFAULT_TYPE):
    today = datetime.date.today()
    logger.info("–ó–∞–ø—É—Å–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞ 5 –¥–Ω–µ–π...")
    for project in projects:
        report_day = datetime.datetime.strptime(project["report_day"], "%Y-%m-%d").date()
        if (report_day - today).days == 5:
            await context.bot.send_message(
                chat_id=project["owner"],
                text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –ß–µ—Ä–µ–∑ 5 –¥–Ω–µ–π –ø–æ –ø—Ä–æ–µ–∫—Ç—É ¬´{project['name']}¬ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç—á—ë—Ç."
            )

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –¥–µ–Ω—å —Å–¥–∞—á–∏ –æ—Ç—á–µ—Ç–∞
async def notify_today(context: ContextTypes.DEFAULT_TYPE):
    today = datetime.date.today()
    logger.info("–ó–∞–ø—É—Å–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è...")
    for project in projects:
        report_day = datetime.datetime.strptime(project["report_day"], "%Y-%m-%d").date()
        if report_day == today:
            await context.bot.send_message(
                chat_id=project["owner"],
                text=f"üìÖ –°–µ–≥–æ–¥–Ω—è –¥–µ–¥–ª–∞–π–Ω –ø–æ –æ—Ç—á—ë—Ç—É –ø–æ –ø—Ä–æ–µ–∫—Ç—É ¬´{project['name']}¬ª."
            )

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    app = Application.builder().token(TOKEN).build()

    # –•–µ–Ω–¥–ª–µ—Ä—ã –∫–æ–º–∞–Ω–¥ –∏ —Ç–µ–∫—Å—Ç–∞
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))

    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
    scheduler = AsyncIOScheduler()
    scheduler.add_job(notify_5days, CronTrigger(day_of_week="mon", hour=9, minute=0), args=[app])
    scheduler.add_job(notify_today, CronTrigger(day_of_week="fri", hour=9, minute=0), args=[app])
    scheduler.start()

    logger.info("–ó–∞–ø—É—Å–∫ ClientOpsBot...")
    await app.run_polling()

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    asyncio.run(main())
