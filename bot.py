import nest_asyncio
nest_asyncio.apply()

import logging
import pandas as pd
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = '8095206946:AAFlOJi0BoRr9Z-MJMigWkk6arT9Ck-uhRk'
CSV_FILE = 'projects.csv'
TIMEZONE = 'Europe/Moscow'

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# –ß—Ç–µ–Ω–∏–µ CSV
def load_projects():
    try:
        df = pd.read_csv(CSV_FILE)
        df['report_date'] = pd.to_datetime(df['report_date'], format='%d')  # —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ
        return df
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è CSV: {e}")
        return pd.DataFrame(columns=['project', 'responsible', 'report_date'])

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
def generate_reminders(days_before: int) -> list[str]:
    today = datetime.now(tz).date()
    try:
        df = pd.read_csv(CSV_PATH)
        df['date'] = pd.to_datetime(df['date'], format='%Y-%m-%d').dt.date
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è CSV: {e}")
        return [f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è CSV: {e}"]

    messages = []

    for _, row in df.iterrows():
        report_date = row['date']
        if report_date.month != today.month:
            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—Ä—É–≥–∏–µ –º–µ—Å—è—Ü—ã

        # ‚ö†Ô∏è –ò—Å–∫–ª—é—á–∞–µ–º –æ—Ç—á—ë—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –ø—Ä–æ—à–ª–∏
        if report_date < today:
            continue

        days_until = (report_date - today).days

        if days_before == 0 and days_until == 0:
            messages.append(f"‚Ä¢ {row['project']} ‚Äî —Å–µ–≥–æ–¥–Ω—è. –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {row['responsible']}")
        elif days_before > 0 and days_until == days_before:
            messages.append(f"‚Ä¢ {row['project']} ‚Äî {report_date.day} —á–∏—Å–ª–∞. –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {row['responsible']}")

    if not messages:
        return ["‚úÖ –°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –æ—Ç—á—ë—Ç–æ–≤."]
    return messages

# –ö–æ–º–∞–Ω–¥—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî ClientOpsBot.\n\n"
        "–Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä–∞–º –æ–± –æ—Ç—á–µ—Ç–∞—Ö –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º:\n"
        "‚Ä¢ –ó–∞ 5 –¥–Ω–µ–π –¥–æ –¥–∞—Ç—ã —Å–¥–∞—á–∏\n"
        "‚Ä¢ –í –¥–µ–Ω—å —Å–¥–∞—á–∏ –æ—Ç—á–µ—Ç–∞\n\n"
        "–ß—Ç–æ–±—ã –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
        "/test_5days ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 5 –¥–Ω–µ–π\n"
        "/test_today ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –¥–µ–Ω—å –æ—Ç—á–µ—Ç–∞\n"
        "/report_1 ‚Äî –æ—Ç—á—ë—Ç –ø–æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–º –æ—Ç—á–µ—Ç–∞–º\n"
        "/report_5 ‚Äî –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç –Ω–µ–¥–µ–ª–∏"
    )

async def test_5days(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msgs = generate_reminders(5)
    if msgs:
        for msg in msgs:
            await update.message.reply_text(msg)
    else:
        await update.message.reply_text("–ù–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞ 5 –¥–Ω–µ–π –Ω–µ—Ç.")

async def test_today(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msgs = generate_reminders(0)
    if msgs:
        for msg in msgs:
            await update.message.reply_text(msg)
    else:
        await update.message.reply_text("–°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –æ—Ç—á–µ—Ç–æ–≤.")

async def report_1(update: Update, context: ContextTypes.DEFAULT_TYPE):
    today = datetime.now()
    df = load_projects()
    df['report_date'] = df['report_date'].apply(lambda d: datetime(today.year, today.month, d.day))
    week = today + timedelta(days=7)

    upcoming = df[df['report_date'] <= week]
    if not upcoming.empty:
        message = "üìÖ –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –æ—Ç—á—ë—Ç—ã –Ω–∞ –Ω–µ–¥–µ–ª–µ:\n"
        for _, row in upcoming.iterrows():
            message += f"‚Ä¢ {row['project']} ‚Äî {row['report_date'].day} —á–∏—Å–ª–∞. –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {row['responsible']}\n"
        message += "\nüßæ –ù–∞–ø–æ–º–Ω–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞–º –æ–± –æ–ø–ª–∞—Ç–µ!"
    else:
        message = "–ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –Ω–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –æ—Ç—á–µ—Ç–æ–≤."

    await update.message.reply_text(message)

async def report_5(update: Update, context: ContextTypes.DEFAULT_TYPE):
    df = load_projects()
    message = "üì§ –û—Ç—á—ë—Ç—ã, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ:\n"
    for _, row in df.iterrows():
        message += f"‚Ä¢ {row['project']} ‚Äî {row['responsible']}\n"
    message += "\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –≤—Å–µ –æ—Ç—á–µ—Ç—ã –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã."
    await update.message.reply_text(message)

# –ó–∞–¥–∞—á–∏
async def send_scheduled_notifications(app, days_before):
    msgs = generate_reminders(days_before)
    for msg in msgs:
        await app.bot.send_message(chat_id='@your_channel_or_chat_id', text=msg)

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("test_5days", test_5days))
    app.add_handler(CommandHandler("test_today", test_today))
    app.add_handler(CommandHandler("report_1", report_1))
    app.add_handler(CommandHandler("report_5", report_5))

    scheduler = AsyncIOScheduler(timezone=TIMEZONE)
    scheduler.add_job(lambda: asyncio.create_task(send_scheduled_notifications(app, 5)), 'cron', hour=9, minute=0)
    scheduler.add_job(lambda: asyncio.create_task(send_scheduled_notifications(app, 0)), 'cron', hour=9, minute=0)
    scheduler.start()

    logging.info("‚úÖ ClientOpsBot –∑–∞–ø—É—â–µ–Ω.")
    await app.run_polling()

# –ó–∞–ø—É—Å–∫
asyncio.run(main())
